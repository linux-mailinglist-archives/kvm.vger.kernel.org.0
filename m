Return-Path: <kvm-owner@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 73FE253D60E
	for <lists+kvm@lfdr.de>; Sat,  4 Jun 2022 10:10:10 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S233427AbiFDIKH (ORCPT <rfc822;lists+kvm@lfdr.de>);
        Sat, 4 Jun 2022 04:10:07 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:59336 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S232057AbiFDIKF (ORCPT <rfc822;kvm@vger.kernel.org>);
        Sat, 4 Jun 2022 04:10:05 -0400
Received: from dfw.source.kernel.org (dfw.source.kernel.org [IPv6:2604:1380:4641:c500::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id B204F38BC7
        for <kvm@vger.kernel.org>; Sat,  4 Jun 2022 01:10:04 -0700 (PDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by dfw.source.kernel.org (Postfix) with ESMTPS id 4896D60EFE
        for <kvm@vger.kernel.org>; Sat,  4 Jun 2022 08:10:04 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 9E542C385B8;
        Sat,  4 Jun 2022 08:10:03 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=k20201202; t=1654330203;
        bh=m8atLHg10uMBvCwOiHa5NmvHe5U3T9fGavEysDs06ig=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=Q9nlSQlgUQgHhKqQFNcJP6QyRIINosbrtee16VhRS28GulZOE6Zr5VX3bgY/2WlQX
         qDnxxS5a8pNadnxIjsd5djKy4ZgLqFEF2Q8ZelmcbXCQoiVsLvWjXqx7mnBvnv/1LP
         4hcgzJz6J4Jltq2l84AQXdHTn3Hni3LDvjkDN4PKdgSl5uSdM2ctNE9dHvUzABidzc
         sRDIBLH6I4QiKl0T3Ji1VGVhrXnwVRDxrspVTV8n9rR6/DwzEYLShSpCRF1tE/iSfg
         66YtvfdUsPY5spZnoHFo63QS4ZQoOHFr0+i++7aFpMY+0BviulRytghzdLSLJfWQiv
         gWLTakk/pwEtQ==
Received: from host217-45-173-31.in-addr.btopenworld.com ([217.45.173.31] helo=wait-a-minute.misterjones.org)
        by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        (Exim 4.94.2)
        (envelope-from <maz@kernel.org>)
        id 1nxOrB-00FaF6-44; Sat, 04 Jun 2022 09:10:01 +0100
Date:   Sat, 04 Jun 2022 09:10:01 +0100
Message-ID: <87wndwluhy.wl-maz@kernel.org>
From:   Marc Zyngier <maz@kernel.org>
To:     Reiji Watanabe <reijiw@google.com>
Cc:     kvmarm@lists.cs.columbia.edu, kvm@vger.kernel.org,
        Linux ARM <linux-arm-kernel@lists.infradead.org>,
        kernel-team@android.com, Will Deacon <will@kernel.org>,
        Mark Brown <broonie@kernel.org>
Subject: Re: [PATCH 03/18] KVM: arm64: Drop FP_FOREIGN_STATE from the hypervisor code
In-Reply-To: <CAAeT=FxmD4Nsrodr-FCjpNghAormCg4P+R7hF3+g_wfQ5T12Rg@mail.gmail.com>
References: <20220528113829.1043361-1-maz@kernel.org>
        <20220528113829.1043361-4-maz@kernel.org>
        <CAAeT=FxmD4Nsrodr-FCjpNghAormCg4P+R7hF3+g_wfQ5T12Rg@mail.gmail.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 217.45.173.31
X-SA-Exim-Rcpt-To: reijiw@google.com, kvmarm@lists.cs.columbia.edu, kvm@vger.kernel.org, linux-arm-kernel@lists.infradead.org, kernel-team@android.com, will@kernel.org, broonie@kernel.org
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false
X-Spam-Status: No, score=-7.7 required=5.0 tests=BAYES_00,DKIMWL_WL_HIGH,
        DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_HI,
        SPF_HELO_NONE,SPF_PASS,T_SCC_BODY_TEXT_LINE autolearn=ham
        autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

On Fri, 03 Jun 2022 06:23:25 +0100,
Reiji Watanabe <reijiw@google.com> wrote:
> 
> Hi Marc,
> 
> On Sat, May 28, 2022 at 4:38 AM Marc Zyngier <maz@kernel.org> wrote:
> >
> > The vcpu KVM_ARM64_FP_FOREIGN_FPSTATE flag tracks the thread's own
> > TIF_FOREIGN_FPSTATE so that we can evaluate just before running
> > the vcpu whether it the FP regs contain something that is owned
> > by the vcpu or not by updating the rest of the FP flags.
> >
> > We do this in the hypervisor code in order to make sure we're
> > in a context where we are not interruptible. But we already
> > have a hook in the run loop to generate this flag. We may as
> > well update the FP flags directly and save the pointless flag
> > tracking.
> >
> > Whilst we're at it, rename update_fp_enabled() to guest_owns_fp_regs()
> > to indicate what the leftover of this helper actually do.
> >
> > Signed-off-by: Marc Zyngier <maz@kernel.org>
> 
> Reviewed-by: Reiji Watanabe <reijiw@google.com>
> 
> 
> > --- a/arch/arm64/kvm/fpsimd.c
> > +++ b/arch/arm64/kvm/fpsimd.c
> > @@ -107,16 +107,19 @@ void kvm_arch_vcpu_load_fp(struct kvm_vcpu *vcpu)
> >  }
> >
> >  /*
> > - * Called just before entering the guest once we are no longer
> > - * preemptable. Syncs the host's TIF_FOREIGN_FPSTATE with the KVM
> > - * mirror of the flag used by the hypervisor.
> > + * Called just before entering the guest once we are no longer preemptable
> > + * and interrupts are disabled. If we have managed to run anything using
> > + * FP while we were preemptible (such as off the back of an interrupt),
> > + * then neither the host nor the guest own the FP hardware (and it was the
> > + * responsibility of the code that used FP to save the existing state).
> > + *
> > + * Note that not supporting FP is basically the same thing as far as the
> > + * hypervisor is concerned (nothing to save).
> >   */
> >  void kvm_arch_vcpu_ctxflush_fp(struct kvm_vcpu *vcpu)
> >  {
> > -       if (test_thread_flag(TIF_FOREIGN_FPSTATE))
> > -               vcpu->arch.flags |= KVM_ARM64_FP_FOREIGN_FPSTATE;
> > -       else
> > -               vcpu->arch.flags &= ~KVM_ARM64_FP_FOREIGN_FPSTATE;
> > +       if (!system_supports_fpsimd() || test_thread_flag(TIF_FOREIGN_FPSTATE))
> > +               vcpu->arch.flags &= ~(KVM_ARM64_FP_ENABLED | KVM_ARM64_FP_HOST);
> >  }
> 
> Although kvm_arch_vcpu_load_fp() unconditionally sets KVM_ARM64_FP_HOST,
> perhaps having kvm_arch_vcpu_load_fp() set KVM_ARM64_FP_HOST only when
> FP is supported might be more consistent?
> Then, checking system_supports_fpsimd() is unnecessary here.
> (KVM_ARM64_FP_ENABLED is not set when FP is not supported)

That's indeed a possibility. But I'm trying not to change the logic
here, only to move it to a place that provides the same semantic
without the need for an extra flag.

I'm happy to stack an extra patch on top of this series though.

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.
