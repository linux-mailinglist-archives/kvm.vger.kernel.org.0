Return-Path: <kvm-owner@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id A086445DC46
	for <lists+kvm@lfdr.de>; Thu, 25 Nov 2021 15:25:06 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1353983AbhKYO2Q (ORCPT <rfc822;lists+kvm@lfdr.de>);
        Thu, 25 Nov 2021 09:28:16 -0500
Received: from mail.kernel.org ([198.145.29.99]:46170 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S240255AbhKYO0P (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 25 Nov 2021 09:26:15 -0500
Received: from disco-boy.misterjones.org (disco-boy.misterjones.org [51.254.78.96])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by mail.kernel.org (Postfix) with ESMTPSA id 3D198610CA;
        Thu, 25 Nov 2021 14:23:04 +0000 (UTC)
Received: from sofa.misterjones.org ([185.219.108.64] helo=why.misterjones.org)
        by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        (Exim 4.94.2)
        (envelope-from <maz@kernel.org>)
        id 1mqFeQ-007pBz-5g; Thu, 25 Nov 2021 14:23:02 +0000
Date:   Thu, 25 Nov 2021 14:23:01 +0000
Message-ID: <877dcwco1m.wl-maz@kernel.org>
From:   Marc Zyngier <maz@kernel.org>
To:     Ganapatrao Kulkarni <gankulkarni@os.amperecomputing.com>
Cc:     catalin.marinas@arm.com, will@kernel.org, andre.przywara@arm.com,
        linux-arm-kernel@lists.infradead.org, kvmarm@lists.cs.columbia.edu,
        kvm@vger.kernel.org, darren@os.amperecomputing.com,
        d.scott.phillips@amperecomputing.com
Subject: Re: [PATCH 2/2] KVM: arm64: nv: fixup! Support multiple nested Stage-2 mmu structures
In-Reply-To: <20211122095803.28943-3-gankulkarni@os.amperecomputing.com>
References: <20211122095803.28943-1-gankulkarni@os.amperecomputing.com>
        <20211122095803.28943-3-gankulkarni@os.amperecomputing.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: gankulkarni@os.amperecomputing.com, catalin.marinas@arm.com, will@kernel.org, andre.przywara@arm.com, linux-arm-kernel@lists.infradead.org, kvmarm@lists.cs.columbia.edu, kvm@vger.kernel.org, darren@os.amperecomputing.com, d.scott.phillips@amperecomputing.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

On Mon, 22 Nov 2021 09:58:03 +0000,
Ganapatrao Kulkarni <gankulkarni@os.amperecomputing.com> wrote:
> 
> Commit 1776c91346b6 ("KVM: arm64: nv: Support multiple nested Stage-2 mmu
> structures")[1] added a function kvm_vcpu_init_nested which expands the
> stage-2 mmu structures array when ever a new vCPU is created. The array
> is expanded using krealloc() and results in a stale mmu address pointer
> in pgt->mmu. Adding a fix to update the pointer with the new address after
> successful krealloc.
> 
> [1] https://git.kernel.org/pub/scm/linux/kernel/git/maz/arm-platforms.git/
> branch kvm-arm64/nv-5.13
> 
> Signed-off-by: Ganapatrao Kulkarni <gankulkarni@os.amperecomputing.com>
> ---
>  arch/arm64/kvm/nested.c | 9 +++++++++
>  1 file changed, 9 insertions(+)
> 
> diff --git a/arch/arm64/kvm/nested.c b/arch/arm64/kvm/nested.c
> index 4ffbc14d0245..57ad8d8f4ee5 100644
> --- a/arch/arm64/kvm/nested.c
> +++ b/arch/arm64/kvm/nested.c
> @@ -68,6 +68,8 @@ int kvm_vcpu_init_nested(struct kvm_vcpu *vcpu)
>  		       num_mmus * sizeof(*kvm->arch.nested_mmus),
>  		       GFP_KERNEL | __GFP_ZERO);
>  	if (tmp) {
> +		int i;
> +
>  		if (kvm_init_stage2_mmu(kvm, &tmp[num_mmus - 1]) ||
>  		    kvm_init_stage2_mmu(kvm, &tmp[num_mmus - 2])) {
>  			kvm_free_stage2_pgd(&tmp[num_mmus - 1]);
> @@ -80,6 +82,13 @@ int kvm_vcpu_init_nested(struct kvm_vcpu *vcpu)
>  		}
>  
>  		kvm->arch.nested_mmus = tmp;
> +
> +		/* Fixup pgt->mmu after krealloc */
> +		for (i = 0; i < kvm->arch.nested_mmus_size; i++) {
> +			struct kvm_s2_mmu *mmu = &kvm->arch.nested_mmus[i];
> +
> +			mmu->pgt->mmu = mmu;
> +		}
>  	}
>  
>  	mutex_unlock(&kvm->lock);

Another good catch. I've tweaked a bit to avoid some unnecessary
repainting, see below.

Thanks again,

	M.

diff --git a/arch/arm64/kvm/nested.c b/arch/arm64/kvm/nested.c
index a4dfffa1dae0..92b225db59ac 100644
--- a/arch/arm64/kvm/nested.c
+++ b/arch/arm64/kvm/nested.c
@@ -66,8 +66,19 @@ int kvm_vcpu_init_nested(struct kvm_vcpu *vcpu)
 	num_mmus = atomic_read(&kvm->online_vcpus) * 2;
 	tmp = krealloc(kvm->arch.nested_mmus,
 		       num_mmus * sizeof(*kvm->arch.nested_mmus),
-		       GFP_KERNEL | __GFP_ZERO);
+		       GFP_KERNEL_ACCOUNT | __GFP_ZERO);
 	if (tmp) {
+		/*
+		 * If we went through a realocation, adjust the MMU
+		 * back-pointers in the pg_table structures.
+		 */
+		if (kvm->arch.nested_mmus != tmp) {
+			int i;
+
+			for (i = 0; i < num_mms - 2; i++)
+				tmp[i].pgt->mmu = &tmp[i];
+		}
+
 		if (kvm_init_stage2_mmu(kvm, &tmp[num_mmus - 1]) ||
 		    kvm_init_stage2_mmu(kvm, &tmp[num_mmus - 2])) {
 			kvm_free_stage2_pgd(&tmp[num_mmus - 1]);

-- 
Without deviation from the norm, progress is not possible.
