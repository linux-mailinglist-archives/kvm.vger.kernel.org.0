Return-Path: <kvm-owner@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 0B91F454C8C
	for <lists+kvm@lfdr.de>; Wed, 17 Nov 2021 18:53:14 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S239717AbhKQR4J (ORCPT <rfc822;lists+kvm@lfdr.de>);
        Wed, 17 Nov 2021 12:56:09 -0500
Received: from us-smtp-delivery-124.mimecast.com ([170.10.133.124]:37581 "EHLO
        us-smtp-delivery-124.mimecast.com" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S239736AbhKQR4G (ORCPT
        <rfc822;kvm@vger.kernel.org>); Wed, 17 Nov 2021 12:56:06 -0500
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;
        s=mimecast20190719; t=1637171587;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:content-type:content-type:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=gJytS6TYFHN4I+aQ3soLUIsII9pfQ1lCuaR2wCc+nmA=;
        b=ViHY1CuNA4KveYSIRkx+b5812WAdW+Wnl0mB1SAfHVULw3ceET5aMgowWnuTXlxujvP/jC
        Yl4PlX8ythNOx8GNXCQUoq94ZbsaHWGiwjyckob6C7REKk/Cog1tAKHn6kOMFJpF8IgCn6
        mAJywLW0S/QuuUTrpbB395X/R2uMyl4=
Received: from mail-oi1-f200.google.com (mail-oi1-f200.google.com
 [209.85.167.200]) (Using TLS) by relay.mimecast.com with ESMTP id
 us-mta-394-oL7g_DC0O6GyEGKCbSF4AQ-1; Wed, 17 Nov 2021 12:53:06 -0500
X-MC-Unique: oL7g_DC0O6GyEGKCbSF4AQ-1
Received: by mail-oi1-f200.google.com with SMTP id bi9-20020a056808188900b002bc4f64083aso2474629oib.7
        for <kvm@vger.kernel.org>; Wed, 17 Nov 2021 09:53:06 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20210112;
        h=x-gm-message-state:date:from:to:cc:subject:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=gJytS6TYFHN4I+aQ3soLUIsII9pfQ1lCuaR2wCc+nmA=;
        b=oLoh9JHJq7flIvrCB/krbdP4EDEpnvr6ltizncvXKUWPUHaJwPvjS3OkbAQ16z5UnR
         ZC9n/tB9gRf2VG8s6Jr3CX33m5iASaae25RV/kc6cruiqzox7de7X90FPhMm7KXWlLsZ
         hXoIoskDpVH4L2fQqd+9FL94QXarpLZ9WNj2ng/vN3v/iY9cBmB+ROd5AhqFhwMFIf96
         4SRedZ/1KDDPPHd6TMjW/Nx1I2hc85s4Uj7nAXYkDhXjeDz7zzKlAki4+Rrq/OCzDQOi
         00qJKiFtREWNmVSJbwWRUX/Mbst/kA9zcFLCQl4BuESGhjLnfw/Wo2SML9VmawAXnASr
         sMNw==
X-Gm-Message-State: AOAM531nGe4XjfyRAoSi+YgDDO0Dj6wRZd22RthViw52LecKW9jOFSAo
        tvfoDmwRficaaeFvFhyut3JCOKPec3kJ7bSgT4LGra5zc9mYHY0exQ3pBUybnBGcE4sFNbiwrrv
        e7sRo++7zhPb6
X-Received: by 2002:a05:6808:1a28:: with SMTP id bk40mr1509999oib.26.1637171585609;
        Wed, 17 Nov 2021 09:53:05 -0800 (PST)
X-Google-Smtp-Source: ABdhPJxvVTGySK8TkO0LyUP88KI2yd/gF5/VvgPEcDRUR4+W9KnRBCZYQT5O53ScMLK1y4UsVCJ9TA==
X-Received: by 2002:a05:6808:1a28:: with SMTP id bk40mr1509973oib.26.1637171585383;
        Wed, 17 Nov 2021 09:53:05 -0800 (PST)
Received: from redhat.com ([38.15.36.239])
        by smtp.gmail.com with ESMTPSA id q33sm72265ooh.16.2021.11.17.09.53.04
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Wed, 17 Nov 2021 09:53:05 -0800 (PST)
Date:   Wed, 17 Nov 2021 10:53:04 -0700
From:   Alex Williamson <alex.williamson@redhat.com>
To:     <abhsahu@nvidia.com>
Cc:     <kvm@vger.kernel.org>, Cornelia Huck <cohuck@redhat.com>,
        Max Gurtovoy <mgurtovoy@nvidia.com>,
        Yishai Hadas <yishaih@nvidia.com>,
        Zhen Lei <thunder.leizhen@huawei.com>,
        Jason Gunthorpe <jgg@nvidia.com>,
        <linux-kernel@vger.kernel.org>
Subject: Re: [RFC 2/3] vfio/pci: virtualize PME related registers bits and
 initialize to zero
Message-ID: <20211117105304.5f9f9d72.alex.williamson@redhat.com>
In-Reply-To: <20211115133640.2231-3-abhsahu@nvidia.com>
References: <20211115133640.2231-1-abhsahu@nvidia.com>
        <20211115133640.2231-3-abhsahu@nvidia.com>
X-Mailer: Claws Mail 3.18.0 (GTK+ 2.24.33; x86_64-redhat-linux-gnu)
MIME-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

On Mon, 15 Nov 2021 19:06:39 +0530
<abhsahu@nvidia.com> wrote:

> From: Abhishek Sahu <abhsahu@nvidia.com>
> 
> If any PME event will be generated by PCI, then it will be mostly
> handled in the host by the root port PME code. For example, in the case
> of PCIe, the PME event will be sent to the root port and then the PME
> interrupt will be generated. This will be handled in
> drivers/pci/pcie/pme.c at the host side. Inside this, the
> pci_check_pme_status() will be called where PME_Status and PME_En bits
> will be cleared. So, the guest OS which is using vfio-pci device will
> not come to know about this PME event.
> 
> To handle these PME events inside guests, we need some framework so
> that if any PME events will happen, then it needs to be forwarded to
> virtual machine monitor. We can virtualize PME related registers bits
> and initialize these bits to zero so vfio-pci device user will assume
> that it is not capable of asserting the PME# signal from any power state.
> 
> Signed-off-by: Abhishek Sahu <abhsahu@nvidia.com>
> ---
>  drivers/vfio/pci/vfio_pci_config.c | 32 +++++++++++++++++++++++++++++-
>  1 file changed, 31 insertions(+), 1 deletion(-)
> 
> diff --git a/drivers/vfio/pci/vfio_pci_config.c b/drivers/vfio/pci/vfio_pci_config.c
> index 6e58b4bf7a60..fb3a503a5b99 100644
> --- a/drivers/vfio/pci/vfio_pci_config.c
> +++ b/drivers/vfio/pci/vfio_pci_config.c
> @@ -738,12 +738,27 @@ static int __init init_pci_cap_pm_perm(struct perm_bits *perm)
>  	 */
>  	p_setb(perm, PCI_CAP_LIST_NEXT, (u8)ALL_VIRT, NO_WRITE);
>  
> +	/*
> +	 * The guests can't process PME events. If any PME event will be
> +	 * generated, then it will be mostly handled in the host and the
> +	 * host will clear the PME_STATUS. So virtualize PME_Support bits.
> +	 * It will be initialized to zero later on.
> +	 */
> +	p_setw(perm, PCI_PM_PMC, PCI_PM_CAP_PME_MASK, NO_WRITE);
> +
>  	/*
>  	 * Power management is defined *per function*, so we can let
>  	 * the user change power state, but we trap and initiate the
>  	 * change ourselves, so the state bits are read-only.
> +	 *
> +	 * The guest can't process PME from D3cold so virtualize PME_Status
> +	 * and PME_En bits. It will be initialized to zero later on.
>  	 */
> -	p_setd(perm, PCI_PM_CTRL, NO_VIRT, ~PCI_PM_CTRL_STATE_MASK);
> +	p_setd(perm, PCI_PM_CTRL,
> +	       PCI_PM_CTRL_PME_ENABLE | PCI_PM_CTRL_PME_STATUS,
> +	       ~(PCI_PM_CTRL_PME_ENABLE | PCI_PM_CTRL_PME_STATUS |
> +		 PCI_PM_CTRL_STATE_MASK));
> +
>  	return 0;
>  }
>  
> @@ -1412,6 +1427,18 @@ static int vfio_ext_cap_len(struct vfio_pci_core_device *vdev, u16 ecap, u16 epo
>  	return 0;
>  }
>  
> +static void vfio_update_pm_vconfig_bytes(struct vfio_pci_core_device *vdev,
> +					 int offset)
> +{
> +	 /* initialize virtualized PME_Support bits to zero */
> +	*(__le16 *)&vdev->vconfig[offset + PCI_PM_PMC] &=
> +		~cpu_to_le16(PCI_PM_CAP_PME_MASK);
> +
> +	 /* initialize virtualized PME_Status and PME_En bits to zero */

        ^ Extra space here and above.


> +	*(__le16 *)&vdev->vconfig[offset + PCI_PM_CTRL] &=
> +		~cpu_to_le16(PCI_PM_CTRL_PME_ENABLE | PCI_PM_CTRL_PME_STATUS);

Perhaps more readable and consistent with elsewhere as:

	__le16 *pmc = (__le16 *)&vdev->vconfig[offset + PCI_PM_PMC];
	__le16 *ctrl = (__le16 *)&vdev->vconfig[offset + PCI_PM_CTRL];

	/* Clear vconfig PME_Support, PME_Status, and PME_En bits */
	*pmc &= ~cpu_to_le16(PCI_PM_CAP_PME_MASK);
	*ctrl &= ~cpu_to_le16(PCI_PM_CTRL_PME_ENABLE | PCI_PM_CTRL_PME_STATUS);

Thanks,
Alex

> +}
> +
>  static int vfio_fill_vconfig_bytes(struct vfio_pci_core_device *vdev,
>  				   int offset, int size)
>  {
> @@ -1535,6 +1562,9 @@ static int vfio_cap_init(struct vfio_pci_core_device *vdev)
>  		if (ret)
>  			return ret;
>  
> +		if (cap == PCI_CAP_ID_PM)
> +			vfio_update_pm_vconfig_bytes(vdev, pos);
> +
>  		prev = &vdev->vconfig[pos + PCI_CAP_LIST_NEXT];
>  		pos = next;
>  		caps++;

