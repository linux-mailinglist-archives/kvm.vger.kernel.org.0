Return-Path: <kvm+bounces-18302-lists+kvm=lfdr.de@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from sy.mirrors.kernel.org (sy.mirrors.kernel.org [147.75.48.161])
	by mail.lfdr.de (Postfix) with ESMTPS id 1EFA68D3928
	for <lists+kvm@lfdr.de>; Wed, 29 May 2024 16:27:47 +0200 (CEST)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by sy.mirrors.kernel.org (Postfix) with ESMTPS id 8ED6FB2593F
	for <lists+kvm@lfdr.de>; Wed, 29 May 2024 14:27:44 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id BF290158209;
	Wed, 29 May 2024 14:27:37 +0000 (UTC)
X-Original-To: kvm@vger.kernel.org
Received: from foss.arm.com (foss.arm.com [217.140.110.172])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id BC1A21386C6
	for <kvm@vger.kernel.org>; Wed, 29 May 2024 14:27:34 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=217.140.110.172
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1716992857; cv=none; b=TISYA5jNeUV26jNm7BNs/aaBfnUY06+5hX0B01fLwF4n3IxWUrIaFKaUP6ILlyjVlVLhjy/lDOyruJtmgkT/fvwsz1elg6nRK5rxRqL2M/djGS4eIyWUPje0OtS0KVe7/2gDcDzHTqjLSlFJf2pmM8PGe5ZvPccqfnKJRLsljd4=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1716992857; c=relaxed/simple;
	bh=gBU5dVr+0/Jj8aKS9U89oDbI4Ha0YG4ZLD8ZIgy1+9I=;
	h=Date:From:To:Cc:Subject:Message-ID:References:MIME-Version:
	 Content-Type:Content-Disposition:In-Reply-To; b=q6adbDemzmR1Ea7Tgg5Y2hbg/JQEJxs9+GvUTerxaGip9NybQvZgnsyZ6ATb+qajIE/rfAc0PgrFNEShUnjw/ioBF7AnC3CX/p5IOHALoyxzX2qWKpsWh16pSF4JBGMg7DlmD6uyR1ZcFUkaNRfQclAGQbu0AZcaXlTvI9Q6OZ4=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=arm.com; spf=pass smtp.mailfrom=arm.com; arc=none smtp.client-ip=217.140.110.172
Authentication-Results: smtp.subspace.kernel.org; dmarc=pass (p=none dis=none) header.from=arm.com
Authentication-Results: smtp.subspace.kernel.org; spf=pass smtp.mailfrom=arm.com
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.121.207.14])
	by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id 49F9D339;
	Wed, 29 May 2024 07:27:58 -0700 (PDT)
Received: from e124191.cambridge.arm.com (e124191.cambridge.arm.com [10.1.197.45])
	by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 07D783F762;
	Wed, 29 May 2024 07:27:32 -0700 (PDT)
Date: Wed, 29 May 2024 15:27:27 +0100
From: Joey Gouly <joey.gouly@arm.com>
To: Marc Zyngier <maz@kernel.org>
Cc: kvmarm@lists.linux.dev, linux-arm-kernel@lists.infradead.org,
	kvm@vger.kernel.org, James Morse <james.morse@arm.com>,
	Suzuki K Poulose <suzuki.poulose@arm.com>,
	Oliver Upton <oliver.upton@linux.dev>,
	Zenghui Yu <yuzenghui@huawei.com>
Subject: Re: [PATCH 1/2] KVM: arm64: nv: Fix relative priorities of
 exceptions generated by ERETAx
Message-ID: <20240529142727.GA1357631@e124191.cambridge.arm.com>
References: <20240528100632.1831995-1-maz@kernel.org>
 <20240528100632.1831995-2-maz@kernel.org>
Precedence: bulk
X-Mailing-List: kvm@vger.kernel.org
List-Id: <kvm.vger.kernel.org>
List-Subscribe: <mailto:kvm+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:kvm+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20240528100632.1831995-2-maz@kernel.org>

Hi Marc,

These references are from ARM DDI 0487 J.a.

On Tue, May 28, 2024 at 11:06:31AM +0100, Marc Zyngier wrote:
> ERETAx can fail in multiple ways:
> 
> (1) ELR_EL2 points lalaland
> (2) we get a PAC failure
> (3) SPSR_EL2 has the wrong mode
> 
> (1) is easy, as we just let the CPU do its thing and deliver an
> Instruction Abort. However, (2) and (3) are interesting, because
> the PAC failure priority is way below that of the Illegal Execution
> State exception.
> 
> Which means that if we have detected a PAC failure (and that we have
> FPACCOMBINE), we must be careful to give priority to the Illegal
> Execution State exception, should one be pending.

This is IZFGJP Prioritization of Synchronous exceptions taken to AArch64 state.

> 
> Solving this involves hoisting the SPSR calculation earlier and
> testing for the IL bit before injecting the FPAC exception.
> 
> In the extreme case of a ERETAx returning to an invalid mode *and*
> failing its PAC check, we end up with an Instruction Abort (due
> to the new PC being mangled by the failed Auth) *and* PSTATE.IL
> being set. Which matches the requirements of the architecture.

And this is IGPPXQ, which says "which causes the next instruction
to generate an Illegal State exception. The exception return instruction does not generate the exception."

Which matches since Instruction Abort has a higher priority than Illegal Exception.

> 
> Whilst we're at it, remove a stale comment that states the obvious
> and only confuses the reader.
> 
> Fixes: 213b3d1ea161 ("KVM: arm64: nv: Handle ERETA[AB] instructions")
> Signed-off-by: Marc Zyngier <maz@kernel.org>
> ---
>  arch/arm64/kvm/emulate-nested.c | 21 +++++++++++----------
>  1 file changed, 11 insertions(+), 10 deletions(-)
> 
> diff --git a/arch/arm64/kvm/emulate-nested.c b/arch/arm64/kvm/emulate-nested.c
> index 72d733c74a38..54090967a335 100644
> --- a/arch/arm64/kvm/emulate-nested.c
> +++ b/arch/arm64/kvm/emulate-nested.c
> @@ -2181,16 +2181,23 @@ void kvm_emulate_nested_eret(struct kvm_vcpu *vcpu)
>  	if (forward_traps(vcpu, HCR_NV))
>  		return;
>  
> +	spsr = vcpu_read_sys_reg(vcpu, SPSR_EL2);
> +	spsr = kvm_check_illegal_exception_return(vcpu, spsr);
> +
>  	/* Check for an ERETAx */
>  	esr = kvm_vcpu_get_esr(vcpu);
>  	if (esr_iss_is_eretax(esr) && !kvm_auth_eretax(vcpu, &elr)) {
>  		/*
> -		 * Oh no, ERETAx failed to authenticate.  If we have
> -		 * FPACCOMBINE, deliver an exception right away.  If we
> -		 * don't, then let the mangled ELR value trickle down the
> +		 * Oh no, ERETAx failed to authenticate.
> +		 *
> +		 * If we have FPACCOMBINE and we don't have a pending
> +		 * Illegal Execution State exception (which has priority
> +		 * over FPAC), deliver an exception right away.
> +		 *
> +		 * Otherwise, let the mangled ELR value trickle down the
>  		 * ERET handling, and the guest will have a little surprise.
>  		 */
> -		if (kvm_has_pauth(vcpu->kvm, FPACCOMBINE)) {
> +		if (kvm_has_pauth(vcpu->kvm, FPACCOMBINE) && !(spsr & PSR_IL_BIT)) {
>  			esr &= ESR_ELx_ERET_ISS_ERETA;
>  			esr |= FIELD_PREP(ESR_ELx_EC_MASK, ESR_ELx_EC_FPAC);
>  			kvm_inject_nested_sync(vcpu, esr);
> @@ -2201,17 +2208,11 @@ void kvm_emulate_nested_eret(struct kvm_vcpu *vcpu)
>  	preempt_disable();
>  	kvm_arch_vcpu_put(vcpu);
>  
> -	spsr = __vcpu_sys_reg(vcpu, SPSR_EL2);
> -	spsr = kvm_check_illegal_exception_return(vcpu, spsr);
>  	if (!esr_iss_is_eretax(esr))
>  		elr = __vcpu_sys_reg(vcpu, ELR_EL2);
>  
>  	trace_kvm_nested_eret(vcpu, elr, spsr);
>  
> -	/*
> -	 * Note that the current exception level is always the virtual EL2,
> -	 * since we set HCR_EL2.NV bit only when entering the virtual EL2.
> -	 */
>  	*vcpu_pc(vcpu) = elr;
>  	*vcpu_cpsr(vcpu) = spsr;
>  

Those references were just me checking it, not suggesting you edit the commit message.

Reviewed-by: Joey Gouly <joey.gouly@arm.com>

Thanks,
Joey

