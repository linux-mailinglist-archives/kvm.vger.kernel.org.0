Return-Path: <kvm+bounces-59287-lists+kvm=lfdr.de@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from am.mirrors.kernel.org (am.mirrors.kernel.org [147.75.80.249])
	by mail.lfdr.de (Postfix) with ESMTPS id 21B52BB0423
	for <lists+kvm@lfdr.de>; Wed, 01 Oct 2025 13:58:53 +0200 (CEST)
Received: from smtp.subspace.kernel.org (relay.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-ECDSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by am.mirrors.kernel.org (Postfix) with ESMTPS id 9864C1941103
	for <lists+kvm@lfdr.de>; Wed,  1 Oct 2025 11:59:15 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 1CB4C2E88A2;
	Wed,  1 Oct 2025 11:58:45 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b="qZCPm84S"
X-Original-To: kvm@vger.kernel.org
Received: from smtp.kernel.org (aws-us-west-2-korg-mail-1.web.codeaurora.org [10.30.226.201])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 288182E611B;
	Wed,  1 Oct 2025 11:58:43 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=10.30.226.201
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1759319924; cv=none; b=fVeQWB7Z1SY4R08gWo6TSpDeYja11FEEWEZXreVWIQYN4NgYYw/GPA6DbH+xWom+SC9mo1mUzsoRjS2HhDfAgTPiVyVvsEWgnthW4f6DM0dYlIeXAzJ10Tr9RW0/MeAkwO5cWx/1Gf+uzjM2PA8YVu+1/23ZkPUap/Bak44GbYQ=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1759319924; c=relaxed/simple;
	bh=q2oyD5KugDIaW6JSBh1QBJ0TUR6MW5UO2WCtAgLmeh8=;
	h=Date:Message-ID:From:To:Cc:Subject:In-Reply-To:References:
	 MIME-Version:Content-Type; b=LMIJhE1DmN+XEtQdpKi1cC2VRCm7mOHjK5y329aLWhwBOk5dbAE2KoNVX7clCujy0nitrTO6lGzNW6pgy7UBRhE53hw8DVcgHD3OadtdqbdVdspI6cdgNqwJNr+56SClLrgueTcpX3iDa0RseSLaRers9ZhQbK13/q4KbXfl1FE=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b=qZCPm84S; arc=none smtp.client-ip=10.30.226.201
Received: by smtp.kernel.org (Postfix) with ESMTPSA id ABEC3C4CEF4;
	Wed,  1 Oct 2025 11:58:43 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
	s=k20201202; t=1759319923;
	bh=q2oyD5KugDIaW6JSBh1QBJ0TUR6MW5UO2WCtAgLmeh8=;
	h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
	b=qZCPm84S00rcJ/5DZZiAQBlbVyFTQO+QHK5ZY/4bD3YhlyN4HVP7XkS2p9o0/WGh3
	 Fu0nDDQctiP6lxSelsLnadRvYKULsWI1WRhAhmH6CXE1dLQ89MYv9TvbMUz125aMY0
	 b7MnaqQtvm381/diXi6A8LLLTaUlgQvmOS3WMVGXEudJ5Tjr//6BHC0XKb6J7bBdHg
	 V1waUBZjdW9YJvCaUhesrG2cMrLgerZcmHlbd6wtZ1SApJXoP+jvecGK65TRwkZ/iq
	 L2rqLAFdjZC53pMBqGe9hGrOgSBfKJol4kn4Fhtc/G9JstpqBcvX0WfuNp+3Jwww3a
	 pUBGKgU9Bopng==
Received: from sofa.misterjones.org ([185.219.108.64] helo=goblin-girl.misterjones.org)
	by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	(Exim 4.98.2)
	(envelope-from <maz@kernel.org>)
	id 1v3vTl-0000000AnCw-1j7p;
	Wed, 01 Oct 2025 11:58:41 +0000
Date: Wed, 01 Oct 2025 12:58:40 +0100
Message-ID: <86ldluzvdb.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Steven Price <steven.price@arm.com>
Cc: kvm@vger.kernel.org,
	kvmarm@lists.linux.dev,
	Catalin Marinas <catalin.marinas@arm.com>,
	Will Deacon <will@kernel.org>,
	James Morse <james.morse@arm.com>,
	Oliver Upton <oliver.upton@linux.dev>,
	Suzuki K Poulose <suzuki.poulose@arm.com>,
	Zenghui Yu
 <yuzenghui@huawei.com>,
	linux-arm-kernel@lists.infradead.org,
	linux-kernel@vger.kernel.org,
	Joey Gouly <joey.gouly@arm.com>,
	Alexandru Elisei <alexandru.elisei@arm.com>,
	Christoffer Dall <christoffer.dall@arm.com>,
	Fuad Tabba <tabba@google.com>,
	linux-coco@lists.linux.dev,
	Ganapatrao Kulkarni <gankulkarni@os.amperecomputing.com>,
	Gavin Shan <gshan@redhat.com>,
	Shanker Donthineni <sdonthineni@nvidia.com>,
	Alper Gun <alpergun@google.com>,
	"Aneesh Kumar K . V"
 <aneesh.kumar@kernel.org>,
	Emi Kisanuki <fj0570is@fujitsu.com>,
	Vishal Annapurve <vannapurve@google.com>
Subject: Re: [PATCH v10 03/43] arm64: RME: Add SMC definitions for calling the RMM
In-Reply-To: <747ab990-d02d-4e7c-9007-a7ac73bb1062@arm.com>
References: <20250820145606.180644-1-steven.price@arm.com>
	<20250820145606.180644-4-steven.price@arm.com>
	<86o6qrym2b.wl-maz@kernel.org>
	<747ab990-d02d-4e7c-9007-a7ac73bb1062@arm.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/30.1
 (aarch64-unknown-linux-gnu) MULE/6.0 (HANACHIRUSATO)
Precedence: bulk
X-Mailing-List: kvm@vger.kernel.org
List-Id: <kvm.vger.kernel.org>
List-Subscribe: <mailto:kvm+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:kvm+unsubscribe@vger.kernel.org>
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: steven.price@arm.com, kvm@vger.kernel.org, kvmarm@lists.linux.dev, catalin.marinas@arm.com, will@kernel.org, james.morse@arm.com, oliver.upton@linux.dev, suzuki.poulose@arm.com, yuzenghui@huawei.com, linux-arm-kernel@lists.infradead.org, linux-kernel@vger.kernel.org, joey.gouly@arm.com, alexandru.elisei@arm.com, christoffer.dall@arm.com, tabba@google.com, linux-coco@lists.linux.dev, gankulkarni@os.amperecomputing.com, gshan@redhat.com, sdonthineni@nvidia.com, alpergun@google.com, aneesh.kumar@kernel.org, fj0570is@fujitsu.com, vannapurve@google.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false

On Wed, 01 Oct 2025 12:00:14 +0100,
Steven Price <steven.price@arm.com> wrote:
> 
> Hi Marc,
> 
> On 01/10/2025 11:05, Marc Zyngier wrote:
> > On Wed, 20 Aug 2025 15:55:23 +0100,
> > Steven Price <steven.price@arm.com> wrote:
> >>
> >> The RMM (Realm Management Monitor) provides functionality that can be
> >> accessed by SMC calls from the host.
> >>
> >> The SMC definitions are based on DEN0137[1] version 1.0-rel0
> >>
> >> [1] https://developer.arm.com/documentation/den0137/1-0rel0/
> >>
> >> Reviewed-by: Gavin Shan <gshan@redhat.com>
> >> Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
> >> Signed-off-by: Steven Price <steven.price@arm.com>
> >> ---
> >> Changes since v9:
> >>  * Corrected size of 'ripas_value' in struct rec_exit. The spec states
> >>    this is an 8-bit type with padding afterwards (rather than a u64).
> >> Changes since v8:
> >>  * Added RMI_PERMITTED_GICV3_HCR_BITS to define which bits the RMM
> >>    permits to be modified.
> >> Changes since v6:
> >>  * Renamed REC_ENTER_xxx defines to include 'FLAG' to make it obvious
> >>    these are flag values.
> >> Changes since v5:
> >>  * Sorted the SMC #defines by value.
> >>  * Renamed SMI_RxI_CALL to SMI_RMI_CALL since the macro is only used for
> >>    RMI calls.
> >>  * Renamed REC_GIC_NUM_LRS to REC_MAX_GIC_NUM_LRS since the actual
> >>    number of available list registers could be lower.
> >>  * Provided a define for the reserved fields of FeatureRegister0.
> >>  * Fix inconsistent names for padding fields.
> >> Changes since v4:
> >>  * Update to point to final released RMM spec.
> >>  * Minor rearrangements.
> >> Changes since v3:
> >>  * Update to match RMM spec v1.0-rel0-rc1.
> >> Changes since v2:
> >>  * Fix specification link.
> >>  * Rename rec_entry->rec_enter to match spec.
> >>  * Fix size of pmu_ovf_status to match spec.
> >> ---
> >>  arch/arm64/include/asm/rmi_smc.h | 269 +++++++++++++++++++++++++++++++
> >>  1 file changed, 269 insertions(+)
> >>  create mode 100644 arch/arm64/include/asm/rmi_smc.h
> >>
> >> diff --git a/arch/arm64/include/asm/rmi_smc.h b/arch/arm64/include/asm/rmi_smc.h
> >> new file mode 100644
> >> index 000000000000..1000368f1bca
> >> --- /dev/null
> >> +++ b/arch/arm64/include/asm/rmi_smc.h
> > 
> > [...]
> > 
> >> +#define RMI_PERMITTED_GICV3_HCR_BITS	(ICH_HCR_EL2_UIE |		\
> >> +					 ICH_HCR_EL2_LRENPIE |		\
> >> +					 ICH_HCR_EL2_NPIE |		\
> >> +					 ICH_HCR_EL2_VGrp0EIE |		\
> >> +					 ICH_HCR_EL2_VGrp0DIE |		\
> >> +					 ICH_HCR_EL2_VGrp1EIE |		\
> >> +					 ICH_HCR_EL2_VGrp1DIE |		\
> >> +					 ICH_HCR_EL2_TDIR)
> > 
> > Why should KVM care about what bits the RMM wants to use? Also, why
> > should KVM be forbidden to use the TALL0, TALL1 and TC bits? If
> > interrupt delivery is the host's business, then the RMM has no
> > business interfering with the GIC programming.
> 
> The RMM receives the guest's GIC state in a field within the REC entry
> structure (enter.gicv3_hcr). The RMM spec states that the above is the
> list of fields that will be considered and that everything else must be
> 0[1]. So this is used to filter the configuration to make sure it's
> valid for the RMM.
> 
> In terms of TALL0/TALL1/TC bits: these control trapping to EL2, and when
> in a realm guest the RMM is EL2 - so it's up to the RMM to configure
> these bits appropriately as it is the RMM which will have to deal with
> the trap.

And I claim this is *wrong*. Again, if the host is in charge of
interrupt injection, then the RMM has absolutely no business is
deciding what can or cannot be trapped. There is zero information
exposed by these traps that the host is not already aware of.

> [1] RWVGFJ in the 1.0 spec from
> https://developer.arm.com/documentation/den0137/latest

Well, until someone explains what this is protecting against, I
consider this as broken.

> >> +	union { /* 0x300 */
> >> +		struct {
> >> +			u64 gicv3_hcr;
> >> +			u64 gicv3_lrs[REC_MAX_GIC_NUM_LRS];
> >> +			u64 gicv3_misr;
> > 
> > Why do we care about ICH_MISR_EL2? Surely we get everything in the
> > registers themselves, right? I think this goes back to my question
> > above: why is the RMM getting in the way of ICH_*_EL2 accesses?
> 
> As mentioned above, the state of the guest's GIC isn't passed through
> the CPU's registers, but instead using the rec_enter/rec_exit
> structures. So unlike a normal guest entry we don't set all the CPU's
> register state before entering, but instead hand over a shared data
> structure and the RMM is responsible for actually programming the
> registers on the CPU. Since many of the registers are (deliberately)
> unavailable to the host (e.g. all the GPRs) it makes some sense the RMM
> also handles the GIC registers save/restore.

And I claim this is nonsense. There is nothing in these registers that
the host doesn't need to know about, which is why they are basically
copied over.

It all feels just wrong.

	M.

-- 
Without deviation from the norm, progress is not possible.

