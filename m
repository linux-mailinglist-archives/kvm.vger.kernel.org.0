Return-Path: <kvm-owner@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id C914275C313
	for <lists+kvm@lfdr.de>; Fri, 21 Jul 2023 11:31:21 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230029AbjGUJbU (ORCPT <rfc822;lists+kvm@lfdr.de>);
        Fri, 21 Jul 2023 05:31:20 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:49012 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229557AbjGUJbR (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 21 Jul 2023 05:31:17 -0400
Received: from dfw.source.kernel.org (dfw.source.kernel.org [139.178.84.217])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 5DD6F2726
        for <kvm@vger.kernel.org>; Fri, 21 Jul 2023 02:31:16 -0700 (PDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
        (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
         key-exchange X25519 server-signature RSA-PSS (2048 bits))
        (No client certificate requested)
        by dfw.source.kernel.org (Postfix) with ESMTPS id EAD32618F6
        for <kvm@vger.kernel.org>; Fri, 21 Jul 2023 09:31:15 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 26ADCC433C8;
        Fri, 21 Jul 2023 09:31:15 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=k20201202; t=1689931875;
        bh=XcixfVNMYmXu3vjiST9n6CTBbXMks5XPaOuqSVzLQ1E=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=KBcTkWsMm97sFHjY8HgzcFT7U3MsdECuXIwprb4jD8Qoi+fmD2dJKp1TyjJx5Gobu
         Nu+BCjf49UZ942NRVqKMOSDBm8qEJVj/thyIn1X7BhKGXKVuQVG0L76YNkbhe68/k9
         x4wpEgBw/dV/JiL77jcJskU5A99OZr4SYeXvabY8nKp+mWhNult2jT9a7Rgr1SIqw/
         weepj5GDCwj3kbAuraKrUXHIA4+6gZZtYyodm89kanlJkoGroLXIUi+t6LcKX1sk1k
         /KYzEY9AHJKZkoUeAPWzhgrvLHVMhsKmMqE7LnMGB4U9V3996npRBsqd2lvl2J7C41
         irrXIfKsoWjQA==
Received: from sofa.misterjones.org ([185.219.108.64] helo=goblin-girl.misterjones.org)
        by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        (Exim 4.95)
        (envelope-from <maz@kernel.org>)
        id 1qMmTg-00FPGP-Fe;
        Fri, 21 Jul 2023 10:31:12 +0100
Date:   Fri, 21 Jul 2023 10:31:12 +0100
Message-ID: <86r0p1txun.wl-maz@kernel.org>
From:   Marc Zyngier <maz@kernel.org>
To:     Cornelia Huck <cohuck@redhat.com>
Cc:     Jing Zhang <jingzhangos@google.com>, KVM <kvm@vger.kernel.org>,
        KVMARM <kvmarm@lists.linux.dev>,
        ARMLinux <linux-arm-kernel@lists.infradead.org>,
        Oliver Upton <oliver.upton@linux.dev>,
        Will Deacon <will@kernel.org>,
        Paolo Bonzini <pbonzini@redhat.com>,
        James Morse <james.morse@arm.com>,
        Alexandru Elisei <alexandru.elisei@arm.com>,
        Suzuki K Poulose <suzuki.poulose@arm.com>,
        Fuad Tabba <tabba@google.com>,
        Reiji Watanabe <reijiw@google.com>,
        Raghavendra Rao Ananta <rananta@google.com>,
        Suraj Jitindar Singh <surajjs@amazon.com>
Subject: Re: [PATCH v6 3/6] KVM: arm64: Enable writable for ID_AA64DFR0_EL1 and ID_DFR0_EL1
In-Reply-To: <87sf9h8xs0.fsf@redhat.com>
References: <20230718164522.3498236-1-jingzhangos@google.com>
        <20230718164522.3498236-4-jingzhangos@google.com>
        <87o7k77yn5.fsf@redhat.com>
        <CAAdAUthM6JJ0tEqWELcW48E235EbcjZQSDLF9OQUZ_kUtqh3Ng@mail.gmail.com>
        <87sf9h8xs0.fsf@redhat.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/28.2
 (aarch64-unknown-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: cohuck@redhat.com, jingzhangos@google.com, kvm@vger.kernel.org, kvmarm@lists.linux.dev, linux-arm-kernel@lists.infradead.org, oliver.upton@linux.dev, will@kernel.org, pbonzini@redhat.com, james.morse@arm.com, alexandru.elisei@arm.com, suzuki.poulose@arm.com, tabba@google.com, reijiw@google.com, rananta@google.com, surajjs@amazon.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false
X-Spam-Status: No, score=-7.1 required=5.0 tests=BAYES_00,DKIMWL_WL_HIGH,
        DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_HI,
        SPF_HELO_NONE,SPF_PASS,T_SCC_BODY_TEXT_LINE autolearn=ham
        autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

On Fri, 21 Jul 2023 09:38:23 +0100,
Cornelia Huck <cohuck@redhat.com> wrote:
>=20
> On Thu, Jul 20 2023, Jing Zhang <jingzhangos@google.com> wrote:
>=20
> > Hi Cornelia,
> >
> > On Thu, Jul 20, 2023 at 1:52=E2=80=AFAM Cornelia Huck <cohuck@redhat.co=
m> wrote:
> >>
> >> On Tue, Jul 18 2023, Jing Zhang <jingzhangos@google.com> wrote:
> >>
> >> > All valid fields in ID_AA64DFR0_EL1 and ID_DFR0_EL1 are writable
> >> > from usrespace with this change.
> >>
> >> Typo: s/usrespace/userspace/
> > Thanks.
> >>
> >> >
> >> > Signed-off-by: Jing Zhang <jingzhangos@google.com>
> >> > ---
> >> >  arch/arm64/kvm/sys_regs.c | 4 ++--
> >> >  1 file changed, 2 insertions(+), 2 deletions(-)
> >> >
> >> > diff --git a/arch/arm64/kvm/sys_regs.c b/arch/arm64/kvm/sys_regs.c
> >> > index 053d8057ff1e..f33aec83f1b4 100644
> >> > --- a/arch/arm64/kvm/sys_regs.c
> >> > +++ b/arch/arm64/kvm/sys_regs.c
> >> > @@ -2008,7 +2008,7 @@ static const struct sys_reg_desc sys_reg_descs=
[] =3D {
> >> >         .set_user =3D set_id_dfr0_el1,
> >> >         .visibility =3D aa32_id_visibility,
> >> >         .reset =3D read_sanitised_id_dfr0_el1,
> >> > -       .val =3D ID_DFR0_EL1_PerfMon_MASK, },
> >> > +       .val =3D GENMASK(63, 0), },
> >> >       ID_HIDDEN(ID_AFR0_EL1),
> >> >       AA32_ID_SANITISED(ID_MMFR0_EL1),
> >> >       AA32_ID_SANITISED(ID_MMFR1_EL1),
> >> > @@ -2057,7 +2057,7 @@ static const struct sys_reg_desc sys_reg_descs=
[] =3D {
> >> >         .get_user =3D get_id_reg,
> >> >         .set_user =3D set_id_aa64dfr0_el1,
> >> >         .reset =3D read_sanitised_id_aa64dfr0_el1,
> >> > -       .val =3D ID_AA64DFR0_EL1_PMUVer_MASK, },
> >> > +       .val =3D GENMASK(63, 0), },
> >> >       ID_SANITISED(ID_AA64DFR1_EL1),
> >> >       ID_UNALLOCATED(5,2),
> >> >       ID_UNALLOCATED(5,3),
> >>
> >> How does userspace find out whether a given id reg is actually writabl=
e,
> >> other than trying to write to it?
> >>
> > No mechanism was provided to userspace to discover if a given idreg or
> > any fields of a given idreg is writable. The write to a readonly idreg
> > can also succeed (write ignored) without any error if what's written
> > is exactly the same as what the idreg holds or if it is a write to
> > AArch32 idregs on an AArch64-only system.
>=20
> Hm, I'm not sure that's a good thing for the cases where we want to
> support mix-and-match userspace and kernels. Userspace may want to know
> upfront whether it can actually tweak the contents of an idreg or not
> (for example, in the context of using CPU models for compatibility), so
> that it can reject or warn about certain configurations that may not
> turn out as the user expects.
>=20
> > Not sure if it is worth adding an API to return the writable mask for
> > idregs, since we want to enable the writable for all allocated
> > unhidden idregs eventually.
>=20
> We'd enable any new idregs for writing from the start in the future, I
> guess?
>=20
> I see two approaches here:
> - add an API to get a list of idregs with their writable masks
> - add a capability "you can write to all idregs whatever you'd expect to
>   be able to write there architecture wise", which would require to add
>   support for all idregs prior to exposing that cap
>=20
> The second option would be the easier one (if we don't manage to break
> it in the future :)

I'm not sure the last option is even possible. The architecture keeps
allocating new ID registers in the op0=3D=3D3, op1=3D=3D{0, 1, 3}, CRn=3D=
=3D0,
CRm=3D=3D{0-7}, op2=3D=3D{0-7} space, so fields that were RES0 until then
start having a non-0 value.

This could lead to a situation where you move from a system that
didn't know about ID_AA64MMFR6_EL1.XYZ to a system that advertises it,
and for which the XYZ instruction has another behaviour. Bad things
follow.

My preference would be a single ioctl that returns the full list of
writeable masks in the ID reg range. It is big, but not crazy big
(1536 bytes, if I haven't messed up), and includes the non ID_*_EL1
sysreg such as MPIDR_EL1, CTR_EL1, SMIDR_EL1.

It would allow the VMM to actively write zeroes to any writable ID
register it doesn't know about, or for which it doesn't have anything
to restore. It is also relatively future proof, as it covers
*everything* the architecture has provisioned for the future (by the
time that space is exhausted, I hope none of us will still be involved
with this crap).

Thanks,

	M.

--=20
Without deviation from the norm, progress is not possible.
