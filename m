Return-Path: <kvm-owner@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 0910661EF31
	for <lists+kvm@lfdr.de>; Mon,  7 Nov 2022 10:38:35 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231211AbiKGJic (ORCPT <rfc822;lists+kvm@lfdr.de>);
        Mon, 7 Nov 2022 04:38:32 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:33136 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S231207AbiKGJia (ORCPT <rfc822;kvm@vger.kernel.org>);
        Mon, 7 Nov 2022 04:38:30 -0500
Received: from dfw.source.kernel.org (dfw.source.kernel.org [139.178.84.217])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id E7759DED
        for <kvm@vger.kernel.org>; Mon,  7 Nov 2022 01:38:28 -0800 (PST)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by dfw.source.kernel.org (Postfix) with ESMTPS id 8388360F9C
        for <kvm@vger.kernel.org>; Mon,  7 Nov 2022 09:38:28 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id E64C1C433C1;
        Mon,  7 Nov 2022 09:38:27 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=k20201202; t=1667813907;
        bh=H0rFkYnoaXV7s4LrmOspIHxtkdjVnhbZoGTomVEV1Zc=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=XF5PWoV8e8s5fiyQ5u+IOc8+i6yg3DgrJgBPSJontSGyIWfRRZbwoVAXAbvjU6ZCw
         dWTkaVtZdr6+haicqvQjBJ8Qc9pExcs4tmlCs3Pmm60QxBUQGU9hZ8MAQ2QRlHZ+5o
         vg6qVrWJZaiEl0tUzY6IHqhpjlabw27TqXCPdUAhT0Ixfst0vP1Q9ypB/cbuXweioH
         PQWqBK/mrp/oWIPBTTvsHEDzlzS61Qmg0orsXLJDb2RHRRH05EJHlhQveWgp8aKerP
         UiUaA0X1xg8dHCp8mDvaVxYiJAsmAMbdawcj2rsWlcgmQYVMAw9djG7dhLRLrOghEr
         Y2HWkKzwV3dIQ==
Received: from sofa.misterjones.org ([185.219.108.64] helo=goblin-girl.misterjones.org)
        by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        (Exim 4.95)
        (envelope-from <maz@kernel.org>)
        id 1oryaH-004LrT-EH;
        Mon, 07 Nov 2022 09:38:25 +0000
Date:   Mon, 07 Nov 2022 09:38:24 +0000
Message-ID: <865yfrqf3j.wl-maz@kernel.org>
From:   Marc Zyngier <maz@kernel.org>
To:     Gavin Shan <gshan@redhat.com>
Cc:     Peter Xu <peterx@redhat.com>, kvmarm@lists.linux.dev,
        kvmarm@lists.cs.columbia.edu, kvm@vger.kernel.org,
        shuah@kernel.org, catalin.marinas@arm.com, andrew.jones@linux.dev,
        ajones@ventanamicro.com, bgardon@google.com, dmatlack@google.com,
        will@kernel.org, suzuki.poulose@arm.com, alexandru.elisei@arm.com,
        pbonzini@redhat.com, seanjc@google.com, oliver.upton@linux.dev,
        zhenyzha@redhat.com, shan.gavin@gmail.com
Subject: Re: [PATCH v8 3/7] KVM: Support dirty ring in conjunction with bitmap
In-Reply-To: <35d005f3-655a-88f5-2de3-848576a26e42@redhat.com>
References: <20221104234049.25103-1-gshan@redhat.com>
        <20221104234049.25103-4-gshan@redhat.com>
        <87o7tkf5re.wl-maz@kernel.org>
        <Y2ffRYoqlQOxgVtk@x1n>
        <87iljrg7vd.wl-maz@kernel.org>
        <Y2gh4x4MD8BJvogH@x1n>
        <35d005f3-655a-88f5-2de3-848576a26e42@redhat.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (aarch64-unknown-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: gshan@redhat.com, peterx@redhat.com, kvmarm@lists.linux.dev, kvmarm@lists.cs.columbia.edu, kvm@vger.kernel.org, shuah@kernel.org, catalin.marinas@arm.com, andrew.jones@linux.dev, ajones@ventanamicro.com, bgardon@google.com, dmatlack@google.com, will@kernel.org, suzuki.poulose@arm.com, alexandru.elisei@arm.com, pbonzini@redhat.com, seanjc@google.com, oliver.upton@linux.dev, zhenyzha@redhat.com, shan.gavin@gmail.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false
X-Spam-Status: No, score=-7.1 required=5.0 tests=BAYES_00,DKIMWL_WL_HIGH,
        DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_HI,
        SPF_HELO_NONE,SPF_PASS autolearn=ham autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

On Sun, 06 Nov 2022 21:23:13 +0000,
Gavin Shan <gshan@redhat.com> wrote:
> 
> Hi Peter and Marc,
> 
> On 11/7/22 5:06 AM, Peter Xu wrote:
> > On Sun, Nov 06, 2022 at 08:12:22PM +0000, Marc Zyngier wrote:
> >> On Sun, 06 Nov 2022 16:22:29 +0000,
> >> Peter Xu <peterx@redhat.com> wrote:
> >>> On Sun, Nov 06, 2022 at 03:43:17PM +0000, Marc Zyngier wrote:
> >>>>> +Note that the bitmap here is only a backup of the ring structure, and
> >>>>> +normally should only contain a very small amount of dirty pages, which
> >>>> 
> >>>> I don't think we can claim this. It is whatever amount of memory is
> >>>> dirtied outside of a vcpu context, and we shouldn't make any claim
> >>>> regarding the number of dirty pages.
> >>> 
> >>> The thing is the current with-bitmap design assumes that the two logs are
> >>> collected in different windows of migration, while the dirty log is only
> >>> collected after the VM is stopped.  So collecting dirty bitmap and sending
> >>> the dirty pages within the bitmap will be part of the VM downtime.
> >>> 
> >>> It will stop to make sense if the dirty bitmap can contain a large portion
> >>> of the guest memory, because then it'll be simpler to just stop the VM,
> >>> transfer pages, and restart on dest node without any tracking mechanism.
> >> 
> >> Oh, I absolutely agree that the whole vcpu dirty ring makes zero sense
> >> in general. It only makes sense if the source of the dirty pages is
> >> limited to the vcpus, which is literally a corner case. Look at any
> >> real machine, and you'll quickly realise that this isn't the case, and
> >> that DMA *is* a huge source of dirty pages.
> >> 
> >> Here, we're just lucky enough not to have much DMA tracking yet. Once
> >> that happens (and I have it from people doing the actual work that it
> >> *is* happening), you'll realise that the dirty ring story is of very
> >> limited use. So I'd rather drop anything quantitative here, as this is
> >> likely to be wrong.
> > 
> > Is it a must that arm64 needs to track device DMAs using the same dirty
> > tracking interface rather than VFIO or any other interface?  It's
> > definitely not the case for x86, but if it's true for arm64, then could the
> > DMA be spread across all the guest pages?  If it's also true, I really
> > don't know how this will work..
> > 
> > We're only syncing the dirty bitmap once right now with the protocol.  If
> > that can cover most of the guest mem, it's same as non-live.  If we sync it
> > periodically, then it's the same as enabling dirty-log alone and the rings
> > are useless.
> > 
> 
> For vgic/its tables, the number of dirty pages can be huge in theory. However,
> they're limited in practice. So I intend to agree with Peter that dirty-ring
> should be avoided and dirty-log needs to be used instead when the DMA case
> is supported in future. As Peter said, the small amount of dirty pages in
> the bitmap is the condition to use it here. I think it makes sense to mention
> it in the document.

And again, I disagree. This API has *nothing* to do with the ITS. It
is completely general purpose and should work with anything because it
is designed for that.

The problem is that you're considering that RING+BITMAP is a different
thing from BITMAP alone when it comes to non-CPU traffic. It really
isn't.  We can't say "there will only be a few pages dirtied", because
we simply don't know.

If you really want a quantitative argument then say something like:

"The use of the ring+bitmap combination is only beneficial if there is
only very little memory that is dirtied by non-CPU agents. Consider
using the stand-alone bitmap API if this isn't the case."

which clearly puts the choice in the hand of the user.

[...]

> How about to avoid mentioning KVM_CLEAR_DIRTY_LOG here? I don't expect QEMU
> to clear the dirty bitmap after it's collected in this particular case.

Peter said there is an undefined behaviour. I want to understand
whether this is the case or not. QEMU is only one of the users of this
stuff, as all the vendors have their own custom VMM, and they do
things in funny ways.

	M.

-- 
Without deviation from the norm, progress is not possible.
