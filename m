Return-Path: <kvm-owner@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 1EA6143850D
	for <lists+kvm@lfdr.de>; Sat, 23 Oct 2021 21:47:41 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230453AbhJWTt5 (ORCPT <rfc822;lists+kvm@lfdr.de>);
        Sat, 23 Oct 2021 15:49:57 -0400
Received: from smtp-fw-2101.amazon.com ([72.21.196.25]:62745 "EHLO
        smtp-fw-2101.amazon.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230379AbhJWTt5 (ORCPT <rfc822;kvm@vger.kernel.org>);
        Sat, 23 Oct 2021 15:49:57 -0400
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
  d=amazon.co.uk; i=@amazon.co.uk; q=dns/txt;
  s=amazon201209; t=1635018458; x=1666554458;
  h=from:to:cc:subject:date:message-id:content-id:
   mime-version:content-transfer-encoding;
  bh=C5z5kSHbPizGC2LS7lBz6/oiSyEPRiHwaIoEPljiq2E=;
  b=MYU//GuF9quZ7g+2/gNUm5NazNWoEaGCzLQxpGYT/5oMatdkag9qQe68
   qWuCoIja5xha8unnVKHAznfzy0g+bBXZsQL4WRaN0sMkQzVJ2RE0FFt6H
   8kGxbzd8/4eT6UhYlTSBoODB+HN1zeaoolhrJppY24y7pSze3D+fj4foA
   U=;
X-IronPort-AV: E=Sophos;i="5.87,176,1631577600"; 
   d="scan'208";a="146922805"
Received: from iad12-co-svc-p1-lb1-vlan2.amazon.com (HELO email-inbound-relay-pdx-2c-72dc3927.us-west-2.amazon.com) ([10.43.8.2])
  by smtp-border-fw-2101.iad2.amazon.com with ESMTP; 23 Oct 2021 19:47:29 +0000
Received: from EX13MTAUEE002.ant.amazon.com (pdx1-ws-svc-p6-lb9-vlan3.pdx.amazon.com [10.236.137.198])
        by email-inbound-relay-pdx-2c-72dc3927.us-west-2.amazon.com (Postfix) with ESMTPS id 9E53E427CD;
        Sat, 23 Oct 2021 19:47:28 +0000 (UTC)
Received: from EX13D08UEE002.ant.amazon.com (10.43.62.92) by
 EX13MTAUEE002.ant.amazon.com (10.43.62.24) with Microsoft SMTP Server (TLS)
 id 15.0.1497.24; Sat, 23 Oct 2021 19:47:27 +0000
Received: from EX13D08UEE001.ant.amazon.com (10.43.62.126) by
 EX13D08UEE002.ant.amazon.com (10.43.62.92) with Microsoft SMTP Server (TLS)
 id 15.0.1497.24; Sat, 23 Oct 2021 19:47:27 +0000
Received: from EX13D08UEE001.ant.amazon.com ([10.43.62.126]) by
 EX13D08UEE001.ant.amazon.com ([10.43.62.126]) with mapi id 15.00.1497.024;
 Sat, 23 Oct 2021 19:47:27 +0000
From:   "Woodhouse, David" <dwmw@amazon.co.uk>
To:     "kvm@vger.kernel.org" <kvm@vger.kernel.org>
CC:     "jmattson@google.com" <jmattson@google.com>,
        "pbonzini@redhat.com" <pbonzini@redhat.com>,
        "wanpengli@tencent.com" <wanpengli@tencent.com>,
        "seanjc@google.com" <seanjc@google.com>,
        "vkuznets@redhat.com" <vkuznets@redhat.com>,
        "mtosatti@redhat.com" <mtosatti@redhat.com>,
        "joro@8bytes.org" <joro@8bytes.org>
Subject: [PATCH] KVM: x86/xen: Fix runstate updates to be atomic when
 preempting vCPU
Thread-Topic: [PATCH] KVM: x86/xen: Fix runstate updates to be atomic when
 preempting vCPU
Thread-Index: AQHXyEbOEaFHmvYwFUClptOzQ0zhKw==
Date:   Sat, 23 Oct 2021 19:47:27 +0000
Message-ID: <3d2a13164cbc61142b16edba85960db9a381bebe.camel@amazon.co.uk>
Accept-Language: en-GB, en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-ms-exchange-messagesentrepresentingtype: 1
x-ms-exchange-transport-fromentityheader: Hosted
x-originating-ip: [10.43.62.122]
Content-Type: text/plain; charset="utf-8"
Content-ID: <FCD25AE851C4CA4997C73D000D70F1A3@amazon.com>
MIME-Version: 1.0
Content-Transfer-Encoding: base64
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

RnJvbTogRGF2aWQgV29vZGhvdXNlIDxkd213QGFtYXpvbi5jby51az4NCg0KVGhlcmUgYXJlIGNp
cmN1bXN0YW5jZXMgd2hlbSBrdm1feGVuX3VwZGF0ZV9ydW5zdGF0ZV9ndWVzdCgpIHNob3VsZCBu
b3QNCnNsZWVwIGJlY2F1c2UgaXQgZW5kcyB1cCBiZWluZyBjYWxsZWQgZnJvbSBfX3NjaGVkdWxl
KCkgd2hlbiB0aGUgdkNQVQ0KaXMgcHJlZW1wdGVkOg0KDQpbICAyMjIuODMwODI1XSAga3ZtX3hl
bl91cGRhdGVfcnVuc3RhdGVfZ3Vlc3QrMHgyNC8weDEwMA0KWyAgMjIyLjgzMDg3OF0gIGt2bV9h
cmNoX3ZjcHVfcHV0KzB4MTRjLzB4MjAwDQpbICAyMjIuODMwOTIwXSAga3ZtX3NjaGVkX291dCsw
eDMwLzB4NDANClsgIDIyMi44MzA5NjBdICBfX3NjaGVkdWxlKzB4NTVjLzB4OWYwDQoNClRvIGhh
bmRsZSB0aGlzLCBtYWtlIGl0IHVzZSB0aGUgc2FtZSB0cmljayBhcyBfX2t2bV94ZW5faGFzX2lu
dGVycnVwdCgpLA0Kb2YgdXNpbmcgdGhlIGh2YSBmcm9tIHRoZSBnZm5fdG9faHZhX2NhY2hlIGRp
cmVjdGx5LiBUaGVuIGl0IGNhbiB1c2UNCnBhZ2VmYXVsdF9kaXNhYmxlKCkgYXJvdW5kIHRoZSBh
Y2Nlc3NlcyBhbmQganVzdCBiYWlsIG91dCBpZiB0aGUgcGFnZQ0KaXMgYWJzZW50ICh3aGljaCBp
cyB1bmxpa2VseSkuDQoNCkkgYWxtb3N0IHN3aXRjaGVkIHRvIHVzaW5nIGEgZ2ZuX3RvX3Bmbl9j
YWNoZSBoZXJlIGFuZCBiYWlsaW5nIG91dCBpZg0Ka3ZtX21hcF9nZm4oKSBmYWlscywgbGlrZSBr
dm1fc3RlYWxfdGltZV9zZXRfcHJlZW1wdGVkKCkgZG9lcyDigJQgYnV0IG9uDQpjbG9zZXIgaW5z
cGVjdGlvbiBpdCBsb29rcyBsaWtlIGt2bV9tYXBfZ2ZuKCkgd2lsbCAqYWx3YXlzKiBmYWlsIGlu
DQphdG9taWMgY29udGV4dCBmb3IgYSBwYWdlIGluIElPTUVNLCB3aGljaCBtZWFucyBpdCB3aWxs
IHNpbGVudGx5IGZhaWwNCnRvIG1ha2UgdGhlIHVwZGF0ZSBldmVyeSBzaW5nbGUgdGltZSBmb3Ig
c3VjaCBndWVzdHMsIEFGQUlDVC4gU28gSQ0KZGlkbid0IGRvIGl0IHRoYXQgd2F5IGFmdGVyIGFs
bC4gQW5kIHdpbGwgcHJvYmFibHkgZml4IHRoYXQgb25lIHRvby4NCg0KQ2M6IHN0YWJsZUB2Z2Vy
Lmtlcm5lbC5vcmcNCkZpeGVzOiAzMGI1Yzg1MWFmNzkgKCJLVk06IHg4Ni94ZW46IEFkZCBzdXBw
b3J0IGZvciB2Q1BVIHJ1bnN0YXRlIGluZm9ybWF0aW9uIikNClNpZ25lZC1vZmYtYnk6IERhdmlk
IFdvb2Rob3VzZSA8ZHdtd0BhbWF6b24uY28udWs+DQotLS0NCiBhcmNoL3g4Ni9rdm0veGVuLmMg
fCA5NyArKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrLS0tLS0tLS0tLS0tLS0tDQogMSBm
aWxlIGNoYW5nZWQsIDY1IGluc2VydGlvbnMoKyksIDMyIGRlbGV0aW9ucygtKQ0KDQpkaWZmIC0t
Z2l0IGEvYXJjaC94ODYva3ZtL3hlbi5jIGIvYXJjaC94ODYva3ZtL3hlbi5jDQppbmRleCA4ZjYy
YmFlYmQwMjguLjNhN2YxYjMxZDc3YiAxMDA2NDQNCi0tLSBhL2FyY2gveDg2L2t2bS94ZW4uYw0K
KysrIGIvYXJjaC94ODYva3ZtL3hlbi5jDQpAQCAtOTMsMzIgKzkzLDU3IEBAIHN0YXRpYyB2b2lk
IGt2bV94ZW5fdXBkYXRlX3J1bnN0YXRlKHN0cnVjdCBrdm1fdmNwdSAqdiwgaW50IHN0YXRlKQ0K
IHZvaWQga3ZtX3hlbl91cGRhdGVfcnVuc3RhdGVfZ3Vlc3Qoc3RydWN0IGt2bV92Y3B1ICp2LCBp
bnQgc3RhdGUpDQogew0KIAlzdHJ1Y3Qga3ZtX3ZjcHVfeGVuICp2eCA9ICZ2LT5hcmNoLnhlbjsN
CisJc3RydWN0IGdmbl90b19odmFfY2FjaGUgKmdoYyA9ICZ2eC0+cnVuc3RhdGVfY2FjaGU7DQor
CXN0cnVjdCBrdm1fbWVtc2xvdHMgKnNsb3RzID0ga3ZtX21lbXNsb3RzKHYtPmt2bSk7DQorCWJv
b2wgYXRvbWljID0gKHN0YXRlID09IFJVTlNUQVRFX3J1bm5hYmxlKTsNCiAJdWludDY0X3Qgc3Rh
dGVfZW50cnlfdGltZTsNCi0JdW5zaWduZWQgaW50IG9mZnNldDsNCisJaW50IF9fdXNlciAqdXNl
cl9zdGF0ZTsNCisJdWludDY0X3QgX191c2VyICp1c2VyX3RpbWVzOw0KIA0KIAlrdm1feGVuX3Vw
ZGF0ZV9ydW5zdGF0ZSh2LCBzdGF0ZSk7DQogDQogCWlmICghdngtPnJ1bnN0YXRlX3NldCkNCiAJ
CXJldHVybjsNCiANCi0JQlVJTERfQlVHX09OKHNpemVvZihzdHJ1Y3QgY29tcGF0X3ZjcHVfcnVu
c3RhdGVfaW5mbykgIT0gMHgyYyk7DQorCWlmICh1bmxpa2VseShzbG90cy0+Z2VuZXJhdGlvbiAh
PSBnaGMtPmdlbmVyYXRpb24gfHwga3ZtX2lzX2Vycm9yX2h2YShnaGMtPmh2YSkpICYmDQorCSAg
ICBrdm1fZ2ZuX3RvX2h2YV9jYWNoZV9pbml0KHYtPmt2bSwgZ2hjLCBnaGMtPmdwYSwgZ2hjLT5s
ZW4pKQ0KKwkJcmV0dXJuOw0KKw0KKwkvKiBXZSBtYWRlIHN1cmUgaXQgZml0cyBpbiBhIHNpbmds
ZSBwYWdlICovDQorCUJVR19PTighZ2hjLT5tZW1zbG90KTsNCisNCisJaWYgKGF0b21pYykNCisJ
CXBhZ2VmYXVsdF9kaXNhYmxlKCk7DQogDQotCW9mZnNldCA9IG9mZnNldG9mKHN0cnVjdCBjb21w
YXRfdmNwdV9ydW5zdGF0ZV9pbmZvLCBzdGF0ZV9lbnRyeV90aW1lKTsNCi0jaWZkZWYgQ09ORklH
X1g4Nl82NA0KIAkvKg0KLQkgKiBUaGUgb25seSBkaWZmZXJlbmNlIGlzIGFsaWdubWVudCBvZiB1
aW50NjRfdCBpbiAzMi1iaXQuDQotCSAqIFNvIHRoZSBmaXJzdCBmaWVsZCAnc3RhdGUnIGlzIGFj
Y2Vzc2VkIGRpcmVjdGx5IHVzaW5nDQotCSAqIG9mZnNldG9mKCkgKHdoZXJlIGl0cyBvZmZzZXQg
aGFwcGVucyB0byBiZSB6ZXJvKSwgd2hpbGUgdGhlDQotCSAqIHJlbWFpbmluZyBmaWVsZHMgd2hp
Y2ggYXJlIGFsbCB1aW50NjRfdCwgc3RhcnQgYXQgJ29mZnNldCcNCi0JICogd2hpY2ggd2UgdHdl
YWsgaGVyZSBieSBhZGRpbmcgNC4NCisJICogVGhlIG9ubHkgZGlmZmVyZW5jZSBiZXR3ZWVuIDMy
LWJpdCBhbmQgNjQtYml0IHZlcnNpb25zIG9mIHRoZQ0KKwkgKiBydW5zdGF0ZSBzdHJ1Y3QgdXMg
dGhlIGFsaWdubWVudCBvZiB1aW50NjRfdCBpbiAzMi1iaXQsIHdoaWNoDQorCSAqIG1lYW5zIHRo
YXQgdGhlIDY0LWJpdCB2ZXJzaW9uIGhhcyBhbiBhZGRpdGlvbmFsIDQgYnl0ZXMgb2YNCisJICog
cGFkZGluZyBhZnRlciB0aGUgZmlyc3QgZmllbGQgJ3N0YXRlJy4NCisJICoNCisJICogU28gd2Ug
dXNlICdpbnQgX191c2VyICp1c2VyX3N0YXRlJyB0byBwb2ludCB0byB0aGUgc3RhdGUgZmllbGQs
DQorCSAqIGFuZCAndWludDY0X3QgX191c2VyICp1c2VyX3RpbWVzJyBmb3IgcnVuc3RhdGVfZW50
cnlfdGltZS4gU28NCisJICogdGhlIGFjdHVhbCBhcnJheSBvZiB0aW1lW10gaW4gZWFjaCBzdGF0
ZSBzdGFydHMgYXQgdXNlcl90aW1lc1sxXS4NCiAJICovDQorCUJVSUxEX0JVR19PTihvZmZzZXRv
ZihzdHJ1Y3QgdmNwdV9ydW5zdGF0ZV9pbmZvLCBzdGF0ZSkgIT0gMCk7DQorCUJVSUxEX0JVR19P
TihvZmZzZXRvZihzdHJ1Y3QgY29tcGF0X3ZjcHVfcnVuc3RhdGVfaW5mbywgc3RhdGUpICE9IDAp
Ow0KKwl1c2VyX3N0YXRlID0gKGludCBfX3VzZXIgKilnaGMtPmh2YTsNCisNCisJQlVJTERfQlVH
X09OKHNpemVvZihzdHJ1Y3QgY29tcGF0X3ZjcHVfcnVuc3RhdGVfaW5mbykgIT0gMHgyYyk7DQor
DQorCXVzZXJfdGltZXMgPSAodWludDY0X3QgX191c2VyICopKGdoYy0+aHZhICsNCisJCQkJCSBv
ZmZzZXRvZihzdHJ1Y3QgY29tcGF0X3ZjcHVfcnVuc3RhdGVfaW5mbywNCisJCQkJCQkgIHN0YXRl
X2VudHJ5X3RpbWUpKTsNCisjaWZkZWYgQ09ORklHX1g4Nl82NA0KIAlCVUlMRF9CVUdfT04ob2Zm
c2V0b2Yoc3RydWN0IHZjcHVfcnVuc3RhdGVfaW5mbywgc3RhdGVfZW50cnlfdGltZSkgIT0NCiAJ
CSAgICAgb2Zmc2V0b2Yoc3RydWN0IGNvbXBhdF92Y3B1X3J1bnN0YXRlX2luZm8sIHN0YXRlX2Vu
dHJ5X3RpbWUpICsgNCk7DQogCUJVSUxEX0JVR19PTihvZmZzZXRvZihzdHJ1Y3QgdmNwdV9ydW5z
dGF0ZV9pbmZvLCB0aW1lKSAhPQ0KIAkJICAgICBvZmZzZXRvZihzdHJ1Y3QgY29tcGF0X3ZjcHVf
cnVuc3RhdGVfaW5mbywgdGltZSkgKyA0KTsNCiANCiAJaWYgKHYtPmt2bS0+YXJjaC54ZW4ubG9u
Z19tb2RlKQ0KLQkJb2Zmc2V0ID0gb2Zmc2V0b2Yoc3RydWN0IHZjcHVfcnVuc3RhdGVfaW5mbywg
c3RhdGVfZW50cnlfdGltZSk7DQorCQl1c2VyX3RpbWVzID0gKHVpbnQ2NF90IF9fdXNlciAqKShn
aGMtPmh2YSArDQorCQkJCQkJIG9mZnNldG9mKHN0cnVjdCB2Y3B1X3J1bnN0YXRlX2luZm8sDQor
CQkJCQkJCSAgc3RhdGVfZW50cnlfdGltZSkpOw0KICNlbmRpZg0KIAkvKg0KIAkgKiBGaXJzdCB3
cml0ZSB0aGUgdXBkYXRlZCBzdGF0ZV9lbnRyeV90aW1lIGF0IHRoZSBhcHByb3ByaWF0ZQ0KQEAg
LTEzMiwyOCArMTU3LDIxIEBAIHZvaWQga3ZtX3hlbl91cGRhdGVfcnVuc3RhdGVfZ3Vlc3Qoc3Ry
dWN0IGt2bV92Y3B1ICp2LCBpbnQgc3RhdGUpDQogCUJVSUxEX0JVR19PTihzaXplb2YoKChzdHJ1
Y3QgY29tcGF0X3ZjcHVfcnVuc3RhdGVfaW5mbyAqKTApLT5zdGF0ZV9lbnRyeV90aW1lKSAhPQ0K
IAkJICAgICBzaXplb2Yoc3RhdGVfZW50cnlfdGltZSkpOw0KIA0KLQlpZiAoa3ZtX3dyaXRlX2d1
ZXN0X29mZnNldF9jYWNoZWQodi0+a3ZtLCAmdi0+YXJjaC54ZW4ucnVuc3RhdGVfY2FjaGUsDQot
CQkJCQkgICZzdGF0ZV9lbnRyeV90aW1lLCBvZmZzZXQsDQotCQkJCQkgIHNpemVvZihzdGF0ZV9l
bnRyeV90aW1lKSkpDQotCQlyZXR1cm47DQorCWlmIChfX3B1dF91c2VyKHN0YXRlX2VudHJ5X3Rp
bWUsIHVzZXJfdGltZXMpKQ0KKwkJZ290byBvdXQ7DQogCXNtcF93bWIoKTsNCiANCiAJLyoNCiAJ
ICogTmV4dCwgd3JpdGUgdGhlIG5ldyBydW5zdGF0ZS4gVGhpcyBpcyBpbiB0aGUgKnNhbWUqIHBs
YWNlDQogCSAqIGZvciAzMi1iaXQgYW5kIDY0LWJpdCBndWVzdHMsIGFzc2VydGVkIGhlcmUgZm9y
IHBhcmFub2lhLg0KIAkgKi8NCi0JQlVJTERfQlVHX09OKG9mZnNldG9mKHN0cnVjdCB2Y3B1X3J1
bnN0YXRlX2luZm8sIHN0YXRlKSAhPQ0KLQkJICAgICBvZmZzZXRvZihzdHJ1Y3QgY29tcGF0X3Zj
cHVfcnVuc3RhdGVfaW5mbywgc3RhdGUpKTsNCiAJQlVJTERfQlVHX09OKHNpemVvZigoKHN0cnVj
dCB2Y3B1X3J1bnN0YXRlX2luZm8gKikwKS0+c3RhdGUpICE9DQogCQkgICAgIHNpemVvZih2eC0+
Y3VycmVudF9ydW5zdGF0ZSkpOw0KIAlCVUlMRF9CVUdfT04oc2l6ZW9mKCgoc3RydWN0IGNvbXBh
dF92Y3B1X3J1bnN0YXRlX2luZm8gKikwKS0+c3RhdGUpICE9DQogCQkgICAgIHNpemVvZih2eC0+
Y3VycmVudF9ydW5zdGF0ZSkpOw0KIA0KLQlpZiAoa3ZtX3dyaXRlX2d1ZXN0X29mZnNldF9jYWNo
ZWQodi0+a3ZtLCAmdi0+YXJjaC54ZW4ucnVuc3RhdGVfY2FjaGUsDQotCQkJCQkgICZ2eC0+Y3Vy
cmVudF9ydW5zdGF0ZSwNCi0JCQkJCSAgb2Zmc2V0b2Yoc3RydWN0IHZjcHVfcnVuc3RhdGVfaW5m
bywgc3RhdGUpLA0KLQkJCQkJICBzaXplb2YodngtPmN1cnJlbnRfcnVuc3RhdGUpKSkNCi0JCXJl
dHVybjsNCisJaWYgKF9fcHV0X3VzZXIodngtPmN1cnJlbnRfcnVuc3RhdGUsIHVzZXJfc3RhdGUp
KQ0KKwkJZ290byBvdXQ7DQogDQogCS8qDQogCSAqIFdyaXRlIHRoZSBhY3R1YWwgcnVuc3RhdGUg
dGltZXMgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlDQpAQCAtMTY4LDI0ICsxODYsMjEgQEAgdm9pZCBr
dm1feGVuX3VwZGF0ZV9ydW5zdGF0ZV9ndWVzdChzdHJ1Y3Qga3ZtX3ZjcHUgKnYsIGludCBzdGF0
ZSkNCiAJQlVJTERfQlVHX09OKHNpemVvZigoKHN0cnVjdCB2Y3B1X3J1bnN0YXRlX2luZm8gKikw
KS0+dGltZSkgIT0NCiAJCSAgICAgc2l6ZW9mKHZ4LT5ydW5zdGF0ZV90aW1lcykpOw0KIA0KLQlp
ZiAoa3ZtX3dyaXRlX2d1ZXN0X29mZnNldF9jYWNoZWQodi0+a3ZtLCAmdi0+YXJjaC54ZW4ucnVu
c3RhdGVfY2FjaGUsDQotCQkJCQkgICZ2eC0+cnVuc3RhdGVfdGltZXNbMF0sDQotCQkJCQkgIG9m
ZnNldCArIHNpemVvZih1NjQpLA0KLQkJCQkJICBzaXplb2YodngtPnJ1bnN0YXRlX3RpbWVzKSkp
DQotCQlyZXR1cm47DQotDQorCWlmIChfX2NvcHlfdG9fdXNlcih1c2VyX3RpbWVzICsgMSwgdngt
PnJ1bnN0YXRlX3RpbWVzLCBzaXplb2YodngtPnJ1bnN0YXRlX3RpbWVzKSkpDQorCQlnb3RvIG91
dDsNCiAJc21wX3dtYigpOw0KIA0KIAkvKg0KIAkgKiBGaW5hbGx5LCBjbGVhciB0aGUgWEVOX1JV
TlNUQVRFX1VQREFURSBiaXQgaW4gdGhlIGd1ZXN0J3MNCiAJICogcnVuc3RhdGVfZW50cnlfdGlt
ZSBmaWVsZC4NCiAJICovDQotDQogCXN0YXRlX2VudHJ5X3RpbWUgJj0gflhFTl9SVU5TVEFURV9V
UERBVEU7DQotCWlmIChrdm1fd3JpdGVfZ3Vlc3Rfb2Zmc2V0X2NhY2hlZCh2LT5rdm0sICZ2LT5h
cmNoLnhlbi5ydW5zdGF0ZV9jYWNoZSwNCi0JCQkJCSAgJnN0YXRlX2VudHJ5X3RpbWUsIG9mZnNl
dCwNCi0JCQkJCSAgc2l6ZW9mKHN0YXRlX2VudHJ5X3RpbWUpKSkNCi0JCXJldHVybjsNCisJX19w
dXRfdXNlcihzdGF0ZV9lbnRyeV90aW1lLCB1c2VyX3RpbWVzKTsNCisJc21wX3dtYigpOw0KKw0K
KyBvdXQ6DQorCWlmIChhdG9taWMpDQorCQlwYWdlZmF1bHRfZW5hYmxlKCk7DQogfQ0KIA0KIGlu
dCBfX2t2bV94ZW5faGFzX2ludGVycnVwdChzdHJ1Y3Qga3ZtX3ZjcHUgKnYpDQpAQCAtMzM3LDYg
KzM1MiwxMiBAQCBpbnQga3ZtX3hlbl92Y3B1X3NldF9hdHRyKHN0cnVjdCBrdm1fdmNwdSAqdmNw
dSwgc3RydWN0IGt2bV94ZW5fdmNwdV9hdHRyICpkYXRhKQ0KIAkJCWJyZWFrOw0KIAkJfQ0KIA0K
KwkJLyogSXQgbXVzdCBmaXQgd2l0aGluIGEgc2luZ2xlIHBhZ2UgKi8NCisJCWlmICgoZGF0YS0+
dS5ncGEgJiB+UEFHRV9NQVNLKSArIHNpemVvZihzdHJ1Y3QgdmNwdV9pbmZvKSA+IFBBR0VfU0la
RSkgew0KKwkJCXIgPSAtRUlOVkFMOw0KKwkJCWJyZWFrOw0KKwkJfQ0KKw0KIAkJciA9IGt2bV9n
Zm5fdG9faHZhX2NhY2hlX2luaXQodmNwdS0+a3ZtLA0KIAkJCQkJICAgICAgJnZjcHUtPmFyY2gu
eGVuLnZjcHVfaW5mb19jYWNoZSwNCiAJCQkJCSAgICAgIGRhdGEtPnUuZ3BhLA0KQEAgLTM1NCw2
ICszNzUsMTIgQEAgaW50IGt2bV94ZW5fdmNwdV9zZXRfYXR0cihzdHJ1Y3Qga3ZtX3ZjcHUgKnZj
cHUsIHN0cnVjdCBrdm1feGVuX3ZjcHVfYXR0ciAqZGF0YSkNCiAJCQlicmVhazsNCiAJCX0NCiAN
CisJCS8qIEl0IG11c3QgZml0IHdpdGhpbiBhIHNpbmdsZSBwYWdlICovDQorCQlpZiAoKGRhdGEt
PnUuZ3BhICYgflBBR0VfTUFTSykgKyBzaXplb2Yoc3RydWN0IHB2Y2xvY2tfdmNwdV90aW1lX2lu
Zm8pID4gUEFHRV9TSVpFKSB7DQorCQkJciA9IC1FSU5WQUw7DQorCQkJYnJlYWs7DQorCQl9DQor
DQogCQlyID0ga3ZtX2dmbl90b19odmFfY2FjaGVfaW5pdCh2Y3B1LT5rdm0sDQogCQkJCQkgICAg
ICAmdmNwdS0+YXJjaC54ZW4udmNwdV90aW1lX2luZm9fY2FjaGUsDQogCQkJCQkgICAgICBkYXRh
LT51LmdwYSwNCkBAIC0zNzUsNiArNDAyLDEyIEBAIGludCBrdm1feGVuX3ZjcHVfc2V0X2F0dHIo
c3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3Qga3ZtX3hlbl92Y3B1X2F0dHIgKmRhdGEpDQog
CQkJYnJlYWs7DQogCQl9DQogDQorCQkvKiBJdCBtdXN0IGZpdCB3aXRoaW4gYSBzaW5nbGUgcGFn
ZSAqLw0KKwkJaWYgKChkYXRhLT51LmdwYSAmIH5QQUdFX01BU0spICsgc2l6ZW9mKHN0cnVjdCB2
Y3B1X3J1bnN0YXRlX2luZm8pID4gUEFHRV9TSVpFKSB7DQorCQkJciA9IC1FSU5WQUw7DQorCQkJ
YnJlYWs7DQorCQl9DQorDQogCQlyID0ga3ZtX2dmbl90b19odmFfY2FjaGVfaW5pdCh2Y3B1LT5r
dm0sDQogCQkJCQkgICAgICAmdmNwdS0+YXJjaC54ZW4ucnVuc3RhdGVfY2FjaGUsDQogCQkJCQkg
ICAgICBkYXRhLT51LmdwYSwNCg0KDQoKCgpBbWF6b24gRGV2ZWxvcG1lbnQgQ2VudHJlIChMb25k
b24pIEx0ZC4gUmVnaXN0ZXJlZCBpbiBFbmdsYW5kIGFuZCBXYWxlcyB3aXRoIHJlZ2lzdHJhdGlv
biBudW1iZXIgMDQ1NDMyMzIgd2l0aCBpdHMgcmVnaXN0ZXJlZCBvZmZpY2UgYXQgMSBQcmluY2lw
YWwgUGxhY2UsIFdvcnNoaXAgU3RyZWV0LCBMb25kb24gRUMyQSAyRkEsIFVuaXRlZCBLaW5nZG9t
LgoKCg==

