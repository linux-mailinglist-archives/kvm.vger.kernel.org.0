Return-Path: <kvm-owner@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 5221E6D00FA
	for <lists+kvm@lfdr.de>; Thu, 30 Mar 2023 12:19:22 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229902AbjC3KTU (ORCPT <rfc822;lists+kvm@lfdr.de>);
        Thu, 30 Mar 2023 06:19:20 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:36824 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229778AbjC3KTT (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 30 Mar 2023 06:19:19 -0400
Received: from dfw.source.kernel.org (dfw.source.kernel.org [IPv6:2604:1380:4641:c500::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 8BFD67289
        for <kvm@vger.kernel.org>; Thu, 30 Mar 2023 03:19:18 -0700 (PDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by dfw.source.kernel.org (Postfix) with ESMTPS id 27D0761FDA
        for <kvm@vger.kernel.org>; Thu, 30 Mar 2023 10:19:18 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 87350C433D2;
        Thu, 30 Mar 2023 10:19:17 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=k20201202; t=1680171557;
        bh=CMp2kdl18Tf8LPjUAO8ppft0LA+7nCX3ctxuW1Ll+48=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=qRG71vlHK4iDGxPKLo/GpAGBGIQY8BxqFNGQcT9cc0Cn6tk9Y/G3QSPt6si/7xoUD
         jq5MWjvgi4nLe7tbdTOYqIH4aT+LamdP6B19a9Uh30PW9xvhD5svbjGkwswur3Iq2J
         j12/6TZ7H+Gmh+TyZySrXJkj3VCkVv6bpArOsnjJp1WG+DAYzk7X4RAlOzai/S6J4b
         F5Kqw+NCahFPGJJEAQ8qT0+H5LyDStBhWuCXJuHRyDRv+i3YWGK6GslAODS2/PXnQx
         woSwb5gXNzsv5KVnJQ/hfnXXB7pVlASOjXPoWEBpOlZyaSWBr646ZhOMH+vBRctnMZ
         KTr/VDB0biraw==
Received: from sofa.misterjones.org ([185.219.108.64] helo=goblin-girl.misterjones.org)
        by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        (Exim 4.95)
        (envelope-from <maz@kernel.org>)
        id 1phpND-004KQm-Aq;
        Thu, 30 Mar 2023 11:19:15 +0100
Date:   Thu, 30 Mar 2023 11:19:14 +0100
Message-ID: <86edp6wnh9.wl-maz@kernel.org>
From:   Marc Zyngier <maz@kernel.org>
To:     Oliver Upton <oliver.upton@linux.dev>
Cc:     kvmarm@lists.linux.dev, kvm@vger.kernel.org,
        linux-arm-kernel@lists.infradead.org,
        James Morse <james.morse@arm.com>,
        Suzuki K Poulose <suzuki.poulose@arm.com>,
        Zenghui Yu <yuzenghui@huawei.com>,
        Ricardo Koller <ricarkol@google.com>,
        Simon Veith <sveith@amazon.de>,
        Reiji Watanabe <reijiw@google.com>,
        Colton Lewis <coltonlewis@google.com>,
        Joey Gouly <joey.gouly@arm.com>, dwmw2@infradead.org
Subject: Re: [PATCH v3 11/18] KVM: arm64: timers: Move the timer IRQs into arch_timer_vm_data
In-Reply-To: <ZCUz9aZRLuEjWu59@linux.dev>
References: <20230324144704.4193635-1-maz@kernel.org>
        <20230324144704.4193635-12-maz@kernel.org>
        <ZCUz9aZRLuEjWu59@linux.dev>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/28.2
 (aarch64-unknown-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: oliver.upton@linux.dev, kvmarm@lists.linux.dev, kvm@vger.kernel.org, linux-arm-kernel@lists.infradead.org, james.morse@arm.com, suzuki.poulose@arm.com, yuzenghui@huawei.com, ricarkol@google.com, sveith@amazon.de, reijiw@google.com, coltonlewis@google.com, joey.gouly@arm.com, dwmw2@infradead.org
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false
X-Spam-Status: No, score=-2.5 required=5.0 tests=DKIMWL_WL_HIGH,DKIM_SIGNED,
        DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_MED,SPF_HELO_NONE,
        SPF_PASS autolearn=unavailable autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

On Thu, 30 Mar 2023 08:02:13 +0100,
Oliver Upton <oliver.upton@linux.dev> wrote:
> 
> On Fri, Mar 24, 2023 at 02:46:57PM +0000, Marc Zyngier wrote:
> > Having the timer IRQs duplicated into each vcpu isn't great, and
> > becomes absolutely awful with NV. So let's move these into
> > the per-VM arch_timer_vm_data structure.
> > 
> > This simplifies a lot of code, but requires us to introduce a
> > mutex so that we can reason about userspace trying to change
> > an interrupt number while another vcpu is running, something
> > that wasn't really well handled so far.
> > 
> > Reviewed-by: Colton Lewis <coltonlewis@google.com>
> > Signed-off-by: Marc Zyngier <maz@kernel.org>
> > ---
> >  arch/arm64/include/asm/kvm_host.h |   2 +
> >  arch/arm64/kvm/arch_timer.c       | 104 +++++++++++++++++-------------
> >  arch/arm64/kvm/arm.c              |   2 +
> >  include/kvm/arm_arch_timer.h      |  18 ++++--
> >  4 files changed, 78 insertions(+), 48 deletions(-)
> > 
> > diff --git a/arch/arm64/include/asm/kvm_host.h b/arch/arm64/include/asm/kvm_host.h
> > index 116233a390e9..1280154c9ef3 100644
> > --- a/arch/arm64/include/asm/kvm_host.h
> > +++ b/arch/arm64/include/asm/kvm_host.h
> > @@ -223,6 +223,8 @@ struct kvm_arch {
> >  #define KVM_ARCH_FLAG_SYSTEM_SUSPEND_ENABLED		5
> >  	/* VM counter offset */
> >  #define KVM_ARCH_FLAG_VM_COUNTER_OFFSET			6
> > +	/* Timer PPIs made immutable */
> > +#define KVM_ARCH_FLAG_TIMER_PPIS_IMMUTABLE		7
> >  
> >  	unsigned long flags;
> >  
> > diff --git a/arch/arm64/kvm/arch_timer.c b/arch/arm64/kvm/arch_timer.c
> > index 7cd0b0947454..88a38d45d352 100644
> > --- a/arch/arm64/kvm/arch_timer.c
> > +++ b/arch/arm64/kvm/arch_timer.c
> > @@ -851,7 +851,6 @@ static void timer_context_init(struct kvm_vcpu *vcpu, int timerid)
> >  
> >  	hrtimer_init(&ctxt->hrtimer, CLOCK_MONOTONIC, HRTIMER_MODE_ABS_HARD);
> >  	ctxt->hrtimer.function = kvm_hrtimer_expire;
> > -	timer_irq(ctxt) = default_ppi[timerid];
> >  
> >  	switch (timerid) {
> >  	case TIMER_PTIMER:
> > @@ -880,6 +879,13 @@ void kvm_timer_vcpu_init(struct kvm_vcpu *vcpu)
> >  	timer->bg_timer.function = kvm_bg_timer_expire;
> >  }
> >  
> > +void kvm_timer_init_vm(struct kvm *kvm)
> > +{
> > +	mutex_init(&kvm->arch.timer_data.lock);
> > +	for (int i = 0; i < NR_KVM_TIMERS; i++)
> > +		kvm->arch.timer_data.ppi[i] = default_ppi[i];
> > +}
> > +
> >  void kvm_timer_cpu_up(void)
> >  {
> >  	enable_percpu_irq(host_vtimer_irq, host_vtimer_irq_flags);
> > @@ -1292,44 +1298,52 @@ void kvm_timer_vcpu_terminate(struct kvm_vcpu *vcpu)
> >  
> >  static bool timer_irqs_are_valid(struct kvm_vcpu *vcpu)
> >  {
> > -	int vtimer_irq, ptimer_irq, ret;
> > -	unsigned long i;
> > +	u32 ppis = 0;
> >  
> > -	vtimer_irq = timer_irq(vcpu_vtimer(vcpu));
> > -	ret = kvm_vgic_set_owner(vcpu, vtimer_irq, vcpu_vtimer(vcpu));
> > -	if (ret)
> > -		return false;
> > +	mutex_lock(&vcpu->kvm->arch.timer_data.lock);
> >  
> > -	ptimer_irq = timer_irq(vcpu_ptimer(vcpu));
> > -	ret = kvm_vgic_set_owner(vcpu, ptimer_irq, vcpu_ptimer(vcpu));
> > -	if (ret)
> > -		return false;
> > +	for (int i = 0; i < NR_KVM_TIMERS; i++) {
> > +		struct arch_timer_context *ctx;
> > +		int irq;
> >  
> > -	kvm_for_each_vcpu(i, vcpu, vcpu->kvm) {
> > -		if (timer_irq(vcpu_vtimer(vcpu)) != vtimer_irq ||
> > -		    timer_irq(vcpu_ptimer(vcpu)) != ptimer_irq)
> > -			return false;
> > +		ctx = vcpu_get_timer(vcpu, i);
> > +		irq = timer_irq(ctx);
> > +		if (kvm_vgic_set_owner(vcpu, irq, ctx))
> > +			break;
> > +
> > +		/*
> > +		 * We know by construction that we only have PPIs, so
> > +		 * all values are less than 32.
> > +		 */
> > +		ppis |= BIT(irq);
> >  	}
> >  
> > -	return true;
> > +	set_bit(KVM_ARCH_FLAG_TIMER_PPIS_IMMUTABLE, &vcpu->kvm->arch.flags);
> > +
> > +	mutex_unlock(&vcpu->kvm->arch.timer_data.lock);
> > +
> > +	return hweight32(ppis) == NR_KVM_TIMERS;
> 
> Does it make sense to only set the IMMUTABLE flag if the timer IRQs are
> indeed valid? I doubt userspace would do anything when it gets the
> EINVAL, but it is possible userspace could make another attempt at
> configuring the IRQs correctly.

Yup, that's fair enough. I'll flip things around.

Thanks!

	M.

-- 
Without deviation from the norm, progress is not possible.
