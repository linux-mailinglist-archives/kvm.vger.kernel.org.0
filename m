Return-Path: <kvm-owner@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id C43566D2888
	for <lists+kvm@lfdr.de>; Fri, 31 Mar 2023 21:13:41 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232664AbjCaTNj (ORCPT <rfc822;lists+kvm@lfdr.de>);
        Fri, 31 Mar 2023 15:13:39 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:46554 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S232330AbjCaTNg (ORCPT <rfc822;kvm@vger.kernel.org>);
        Fri, 31 Mar 2023 15:13:36 -0400
Received: from ams.source.kernel.org (ams.source.kernel.org [IPv6:2604:1380:4601:e00::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 3982223B7C
        for <kvm@vger.kernel.org>; Fri, 31 Mar 2023 12:13:31 -0700 (PDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by ams.source.kernel.org (Postfix) with ESMTPS id 93882B831E9
        for <kvm@vger.kernel.org>; Fri, 31 Mar 2023 19:13:29 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 1E455C433EF;
        Fri, 31 Mar 2023 19:13:28 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=k20201202; t=1680290008;
        bh=qTLcW2B2aPxiQh4sSHJRGzaYYWFUKxo+JL7LBEZqDqk=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=iJOJJc0/UAaEIIYeIa2bMU+eB36/aPQeqG7MuBphA4BltwDfRlDk8kQY2n+iDOwXv
         am0cOAkd2oZL556EnvW8W1rkopph7dYXN2fKq9dQDM1sN1Drf1/cDFG5zTqyqVE/mG
         GQPJMofxioJOdrsC7kbqjZBfoIPcQKQ/z9BtoNlihcsTmEPGhf0IhR1DjqsFcDjDmN
         3uVPCpxrqaG5ss1W5BbCK+GDnr/02fOHs0RJgZ6NZ27R/4DsNU7O24XS0WaFqxTuJR
         G6I+4/8a+4G8DiyA5yxS2kfJEsh9mOYCM4c6xye63gISaBTY8lPIWGJrIu6Aoqea88
         2uqjxksLBA/rA==
Received: from sofa.misterjones.org ([185.219.108.64] helo=goblin-girl.misterjones.org)
        by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        (Exim 4.95)
        (envelope-from <maz@kernel.org>)
        id 1piKBh-004nf8-Ox;
        Fri, 31 Mar 2023 20:13:25 +0100
Date:   Fri, 31 Mar 2023 20:13:24 +0100
Message-ID: <864jq0wx7v.wl-maz@kernel.org>
From:   Marc Zyngier <maz@kernel.org>
To:     Oliver Upton <oliver.upton@linux.dev>
Cc:     kvmarm@lists.linux.dev, kvm@vger.kernel.org,
        Paolo Bonzini <pbonzini@redhat.com>,
        James Morse <james.morse@arm.com>,
        Suzuki K Poulose <suzuki.poulose@arm.com>,
        Zenghui Yu <yuzenghui@huawei.com>,
        Sean Christopherson <seanjc@google.com>,
        Salil Mehta <salil.mehta@huawei.com>
Subject: Re: [PATCH v2 09/13] KVM: arm64: Indroduce support for userspace SMCCC filtering
In-Reply-To: <20230330154918.4014761-10-oliver.upton@linux.dev>
References: <20230330154918.4014761-1-oliver.upton@linux.dev>
        <20230330154918.4014761-10-oliver.upton@linux.dev>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/28.2
 (aarch64-unknown-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: oliver.upton@linux.dev, kvmarm@lists.linux.dev, kvm@vger.kernel.org, pbonzini@redhat.com, james.morse@arm.com, suzuki.poulose@arm.com, yuzenghui@huawei.com, seanjc@google.com, salil.mehta@huawei.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false
X-Spam-Status: No, score=-2.5 required=5.0 tests=DKIMWL_WL_HIGH,DKIM_SIGNED,
        DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_MED,SPF_HELO_NONE,
        SPF_PASS autolearn=unavailable autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

On Thu, 30 Mar 2023 16:49:14 +0100,
Oliver Upton <oliver.upton@linux.dev> wrote:

nit: typo in the subject. Also, this isn't so much about filtering,
but forwarding.

> 
> As the SMCCC (and related specifications) march towards an 'everything
> and the kitchen sink' interface for interacting with a system it becomes
> less likely that KVM will support every related feature. We could do
> better by letting userspace have a crack at it instead.
> 
> Allow userspace to define an 'SMCCC filter' that applies to both HVCs
> and SMCs initiated by the guest. Supporting both conduits with this
> interface is important for a couple of reasons. Guest SMC usage is table
> stakes for a nested guest, as HVCs are always taken to the virtual EL2.
> Additionally, guests may want to interact with a service on the secure
> side which can now be proxied by userspace.
> 
> Signed-off-by: Oliver Upton <oliver.upton@linux.dev>
> ---
>  Documentation/virt/kvm/devices/vm.rst | 76 +++++++++++++++++++++++++++
>  arch/arm64/include/uapi/asm/kvm.h     | 11 ++++
>  arch/arm64/kvm/arm.c                  |  4 ++
>  arch/arm64/kvm/hypercalls.c           | 58 ++++++++++++++++++++
>  include/kvm/arm_hypercalls.h          |  3 ++
>  5 files changed, 152 insertions(+)
> 
> diff --git a/Documentation/virt/kvm/devices/vm.rst b/Documentation/virt/kvm/devices/vm.rst
> index 147efec626e5..f56c159cac19 100644
> --- a/Documentation/virt/kvm/devices/vm.rst
> +++ b/Documentation/virt/kvm/devices/vm.rst
> @@ -321,3 +321,79 @@ Allows userspace to query the status of migration mode.
>  	     if it is enabled
>  :Returns:   -EFAULT if the given address is not accessible from kernel space;
>  	    0 in case of success.
> +
> +6. GROUP: KVM_ARM_VM_SMCCC_CTRL
> +===============================
> +
> +:Architectures: arm64
> +
> +6.1. ATTRIBUTE: KVM_ARM_VM_SMCCC_FILTER (w/o)
> +---------------------------------------------
> +
> +:Parameters: Pointer to a ``struct kvm_smccc_filter``
> +
> +:Returns:
> +
> +        =======  ===========================================
> +        -EPERM   Range intersects with a reserved range
> +        -EEXIST  Range intersects with a previously inserted
> +                 range
> +        -EBUSY   A vCPU in the VM has already run
> +        -EINVAL  Invalid filter configuration
> +        -ENOMEM  Failed to allocate memory for the in-kernel
> +                 representation of the SMCCC filter
> +        =======  ===========================================
> +
> +Requests the installation of an SMCCC call filter described as follows::
> +
> +    enum kvm_smccc_filter_action {
> +            KVM_SMCCC_FILTER_ALLOW = 0,
> +            KVM_SMCCC_FILTER_DENY,
> +            KVM_SMCCC_FILTER_FWD_TO_USER,
> +    };
> +
> +    struct kvm_smccc_filter {
> +            __u32 base;
> +            __u32 nr_functions;
> +            __u8 action;
> +            __u8 pad[7];

If I could add one word (pun intended) here, I'd add an extra 64bit of
padding, just in case we end-up needing to pass an address, or
something else.

> +    };
> +
> +The filter is defined as a set of non-overlapping ranges. Each
> +range defines an action to be applied to SMCCC calls within the range.
> +Userspace can insert multiple ranges into the filter by using
> +successive calls to this attribute.
> +
> +The default configuration of KVM is such that all implemented SMCCC
> +calls are allowed. Thus, the SMCCC filter can be defined sparsely
> +by userspace, only describing ranges that modify the default behavior.
> +
> +The range expressed by ``struct kvm_smccc_filter`` is
> +[``base``, ``base + nr_functions``).
> +
> +The SMCCC filter applies to both SMC and HVC calls initiated by the
> +guest. The SMCCC filter gates the in-kernel emulation of SMCCC calls
> +and as such takes effect before other interfaces that interact with
> +SMCCC calls (e.g. hypercall bitmap registers).
> +
> +Actions:
> +
> + - ``KVM_SMCCC_FILTER_ALLOW``: Allows the guest SMCCC call to be
> +   handled in-kernel. It is strongly recommended that userspace *not*
> +   explicitly describe the allowed SMCCC call ranges.
> +
> + - ``KVM_SMCCC_FILTER_DENY``: Rejects the guest SMCCC call in-kernel
> +   and returns to the guest.
> +
> + - ``KVM_SMCCC_FILTER_FWD_TO_USER``: The guest SMCCC call is forwarded
> +   to userspace with an exit reason of ``KVM_EXIT_HYPERCALL``.
> +
> +KVM reserves the 'Arm Architecture Calls' range of function IDs and
> +will reject attempts to define a filter for any portion of these ranges:
> +
> +        =========== ===============
> +        Start       End (inclusive)
> +        =========== ===============
> +        0x8000_0000 0x8000_FFFF
> +        0xC000_0000 0xC000_FFFF
> +        =========== ===============

You also may want to call out that all padding fields must be set to 0.

> diff --git a/arch/arm64/include/uapi/asm/kvm.h b/arch/arm64/include/uapi/asm/kvm.h
> index 1dabb7d05514..ba188562b7e0 100644
> --- a/arch/arm64/include/uapi/asm/kvm.h
> +++ b/arch/arm64/include/uapi/asm/kvm.h
> @@ -372,6 +372,10 @@ enum {
>  #endif
>  };
>  
> +/* Device Control API on vm fd */
> +#define KVM_ARM_VM_SMCCC_CTRL		0
> +#define   KVM_ARM_VM_SMCCC_FILTER	0
> +
>  /* Device Control API: ARM VGIC */
>  #define KVM_DEV_ARM_VGIC_GRP_ADDR	0
>  #define KVM_DEV_ARM_VGIC_GRP_DIST_REGS	1
> @@ -479,6 +483,13 @@ enum kvm_smccc_filter_action {
>  #endif
>  };
>  
> +struct kvm_smccc_filter {
> +	__u32 base;
> +	__u32 nr_functions;
> +	__u8 action;
> +	__u8 pad[7];
> +};
> +
>  /* arm64-specific KVM_EXIT_HYPERCALL flags */
>  #define KVM_HYPERCALL_EXIT_SMC	(1U << 0)
>  
> diff --git a/arch/arm64/kvm/arm.c b/arch/arm64/kvm/arm.c
> index 1202ac03bee0..efee032c9560 100644
> --- a/arch/arm64/kvm/arm.c
> +++ b/arch/arm64/kvm/arm.c
> @@ -1444,6 +1444,8 @@ static int kvm_vm_ioctl_set_device_addr(struct kvm *kvm,
>  static int kvm_vm_has_attr(struct kvm *kvm, struct kvm_device_attr *attr)
>  {
>  	switch (attr->group) {
> +	case KVM_ARM_VM_SMCCC_CTRL:
> +		return kvm_vm_smccc_has_attr(kvm, attr);
>  	default:
>  		return -ENXIO;
>  	}
> @@ -1452,6 +1454,8 @@ static int kvm_vm_has_attr(struct kvm *kvm, struct kvm_device_attr *attr)
>  static int kvm_vm_set_attr(struct kvm *kvm, struct kvm_device_attr *attr)
>  {
>  	switch (attr->group) {
> +	case KVM_ARM_VM_SMCCC_CTRL:
> +		return kvm_vm_smccc_set_attr(kvm, attr);
>  	default:
>  		return -ENXIO;
>  	}
> diff --git a/arch/arm64/kvm/hypercalls.c b/arch/arm64/kvm/hypercalls.c
> index 7e8c850847c1..6b371d8fb3c0 100644
> --- a/arch/arm64/kvm/hypercalls.c
> +++ b/arch/arm64/kvm/hypercalls.c
> @@ -145,6 +145,42 @@ static void init_smccc_filter(struct kvm *kvm)
>  	WARN_ON_ONCE(r);
>  }
>  
> +static int kvm_smccc_set_filter(struct kvm *kvm, struct kvm_smccc_filter __user *uaddr)
> +{
> +	struct kvm_smccc_filter filter;
> +	unsigned long start, end;
> +	int r;
> +
> +	if (copy_from_user(&filter, uaddr, sizeof(filter)))
> +		return -EFAULT;
> +
> +	mutex_lock(&kvm->lock);
> +
> +	if (kvm_vm_has_ran_once(kvm)) {
> +		r = -EBUSY;
> +		goto out_unlock;
> +	}
> +
> +	if (!filter.nr_functions || filter.action >= NR_SMCCC_FILTER_ACTIONS) {
> +		r = -EINVAL;
> +		goto out_unlock;
> +	}

Also check that the padding fields are set to 0 until we have a better
use for them.

> +
> +	start = filter.base;
> +	end = start + filter.nr_functions - 1;
> +
> +	r = mtree_insert_range(&kvm->arch.smccc_filter, start, end,
> +			       xa_mk_value(filter.action), GFP_KERNEL_ACCOUNT);
> +	if (r)
> +		goto out_unlock;
> +
> +	set_bit(KVM_ARCH_FLAG_SMCCC_FILTER_CONFIGURED, &kvm->arch.flags);
> +
> +out_unlock:
> +	mutex_unlock(&kvm->lock);
> +	return r;
> +}
> +

Just a though: it'd be interesting to have a debugfs file dumping the
content of the maple tree, if only to figure out what it going on when
doing some userspace hacking. Not something that's needed right now
though.

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.
