Return-Path: <kvm-owner@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 32839719C1D
	for <lists+kvm@lfdr.de>; Thu,  1 Jun 2023 14:27:44 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S231926AbjFAM1n (ORCPT <rfc822;lists+kvm@lfdr.de>);
        Thu, 1 Jun 2023 08:27:43 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:36620 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S230268AbjFAM1l (ORCPT <rfc822;kvm@vger.kernel.org>);
        Thu, 1 Jun 2023 08:27:41 -0400
Received: from dfw.source.kernel.org (dfw.source.kernel.org [IPv6:2604:1380:4641:c500::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id D646512C
        for <kvm@vger.kernel.org>; Thu,  1 Jun 2023 05:27:40 -0700 (PDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by dfw.source.kernel.org (Postfix) with ESMTPS id 75C4264401
        for <kvm@vger.kernel.org>; Thu,  1 Jun 2023 12:27:40 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id D46FCC433EF;
        Thu,  1 Jun 2023 12:27:39 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=k20201202; t=1685622459;
        bh=HyqkcnhCU5T36iXrGBlL9WIuUqjX4QxbHofEbqsAwkk=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=f+QcCTK05Tz+YiIS2CTYV4uaSzK2H6olrm3kWNViE8Y6hRPKjdHJ8kJZCwnj+JcIq
         kaPpjIS+BMEkmQVpJV+gKEuQpiz1e/kochL/Tghgn4++sQ6fL+4qCtCu1qWn4/6PEg
         48xGKB5zpcdXH4vtQGf1AwGw3xx9wxO3qslQEXVWS8T2TXWQ/M4ukk1zIaHnHu/njO
         +TO/XRvmVn4nNAmWdDD7K2dnTh93cNLhcYSPuCQhKHwo034SjaG37cJcf3Ucfau5Wi
         hZ7RRGDNktXZM9KSiWl3OLtSuQzIsGplHVYJ/p8qEU3xoXtR0lXYk1HYEAFICDX+X8
         X5ydAD6PcdzqA==
Received: from 90.4.23.109.rev.sfr.net ([109.23.4.90] helo=wait-a-minute.misterjones.org)
        by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        (Exim 4.95)
        (envelope-from <maz@kernel.org>)
        id 1q4hOz-00213h-5X;
        Thu, 01 Jun 2023 13:27:37 +0100
Date:   Thu, 01 Jun 2023 13:27:35 +0100
Message-ID: <87cz2fpdu0.wl-maz@kernel.org>
From:   Marc Zyngier <maz@kernel.org>
To:     Oliver Upton <oliver.upton@linux.dev>
Cc:     kvmarm@lists.linux.dev, kvm@vger.kernel.org,
        linux-arm-kernel@lists.infradead.org,
        James Morse <james.morse@arm.com>,
        Suzuki K Poulose <suzuki.poulose@arm.com>,
        Zenghui Yu <yuzenghui@huawei.com>,
        Quentin Perret <qperret@google.com>,
        Will Deacon <will@kernel.org>, Fuad Tabba <tabba@google.com>
Subject: Re: [PATCH v2 04/17] arm64: Add KVM_HVHE capability and has_hvhe() predicate
In-Reply-To: <ZHhDcIYlAGF4KOK+@linux.dev>
References: <20230526143348.4072074-1-maz@kernel.org>
        <20230526143348.4072074-5-maz@kernel.org>
        <ZHhDcIYlAGF4KOK+@linux.dev>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/28.2
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 109.23.4.90
X-SA-Exim-Rcpt-To: oliver.upton@linux.dev, kvmarm@lists.linux.dev, kvm@vger.kernel.org, linux-arm-kernel@lists.infradead.org, james.morse@arm.com, suzuki.poulose@arm.com, yuzenghui@huawei.com, qperret@google.com, will@kernel.org, tabba@google.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false
X-Spam-Status: No, score=-4.6 required=5.0 tests=BAYES_00,DKIMWL_WL_HIGH,
        DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_MED,
        SPF_HELO_NONE,SPF_PASS,T_SCC_BODY_TEXT_LINE autolearn=ham
        autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

Hi Oliver,

On Thu, 01 Jun 2023 08:06:24 +0100,
Oliver Upton <oliver.upton@linux.dev> wrote:
> 
> Hey Marc,
> 
> I'm an idiot and was responding to v1. Here's the same damn comment, but
> on v2!

Probably means that I'm even more of an idiot by sending the same
buggy code twice! :D

> 
> On Fri, May 26, 2023 at 03:33:35PM +0100, Marc Zyngier wrote:
> > Expose a capability keying the hVHE feature as well as a new
> > predicate testing it. Nothing is so far using it, and nothing
> > is enabling it yet.
> > 
> > Signed-off-by: Marc Zyngier <maz@kernel.org>
> > ---
> >  arch/arm64/include/asm/cpufeature.h |  1 +
> >  arch/arm64/include/asm/virt.h       |  8 ++++++++
> >  arch/arm64/kernel/cpufeature.c      | 15 +++++++++++++++
> >  arch/arm64/tools/cpucaps            |  1 +
> >  4 files changed, 25 insertions(+)
> > 
> > diff --git a/arch/arm64/include/asm/cpufeature.h b/arch/arm64/include/asm/cpufeature.h
> > index bc1009890180..3d4b547ae312 100644
> > --- a/arch/arm64/include/asm/cpufeature.h
> > +++ b/arch/arm64/include/asm/cpufeature.h
> > @@ -16,6 +16,7 @@
> >  #define cpu_feature(x)		KERNEL_HWCAP_ ## x
> >  
> >  #define ARM64_SW_FEATURE_OVERRIDE_NOKASLR	0
> > +#define ARM64_SW_FEATURE_OVERRIDE_HVHE		4
> >  
> >  #ifndef __ASSEMBLY__
> >  
> > diff --git a/arch/arm64/include/asm/virt.h b/arch/arm64/include/asm/virt.h
> > index 91029709d133..5f84a87a6a2d 100644
> > --- a/arch/arm64/include/asm/virt.h
> > +++ b/arch/arm64/include/asm/virt.h
> > @@ -145,6 +145,14 @@ static __always_inline bool is_protected_kvm_enabled(void)
> >  		return cpus_have_final_cap(ARM64_KVM_PROTECTED_MODE);
> >  }
> >  
> > +static __always_inline bool has_hvhe(void)
> > +{
> > +	if (is_vhe_hyp_code())
> > +		return false;
> > +
> > +	return cpus_have_final_cap(ARM64_KVM_HVHE);
> > +}
> > +
> >  static inline bool is_hyp_nvhe(void)
> >  {
> >  	return is_hyp_mode_available() && !is_kernel_in_hyp_mode();
> > diff --git a/arch/arm64/kernel/cpufeature.c b/arch/arm64/kernel/cpufeature.c
> > index 2d2b7bb5fa0c..04ef60571b37 100644
> > --- a/arch/arm64/kernel/cpufeature.c
> > +++ b/arch/arm64/kernel/cpufeature.c
> > @@ -1998,6 +1998,15 @@ static bool has_nested_virt_support(const struct arm64_cpu_capabilities *cap,
> >  	return true;
> >  }
> >  
> > +static bool hvhe_possible(const struct arm64_cpu_capabilities *entry,
> > +			  int __unused)
> > +{
> > +	u64 val;
> > +
> > +	val = arm64_sw_feature_override.val & arm64_sw_feature_override.mask;
> > +	return cpuid_feature_extract_unsigned_field(val, ARM64_SW_FEATURE_OVERRIDE_HVHE);
> > +}
> 
> Does this need to test ID_AA64MMFR1_EL1.VH as well? Otherwise I don't
> see what would stop us from attempting hVHE on a system with asymmetric
> support for VHE, as the software override was only evaluated on the boot
> CPU.

Huh. You obviously have a filthy mind. Yeah, we could also test for
the sanitised view of MMFR1.VH and change our mind at the last minute.
I'll add a check. It also probably means that I need to make this a
"ARM64_CPUCAP_SYSTEM_FEATURE" instead of a
"ARM64_CPUCAP_STRICT_BOOT_CPU_FEATURE" (I think...).

But it has to be said that such a system, even without my hacks, would
badly explode if the boot CPU was VHE capable and a secondary wasn't.
The boot logic would keep one CPU at EL2 and move the secondary to
EL1, and things would seamingly work until you try to do things like
TLB invalidation (and you probably wouldn't even get a timer
interrupt...).

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.
