Return-Path: <kvm-owner@vger.kernel.org>
X-Original-To: lists+kvm@lfdr.de
Delivered-To: lists+kvm@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 18A1458E99E
	for <lists+kvm@lfdr.de>; Wed, 10 Aug 2022 11:29:00 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S232049AbiHJJ2q (ORCPT <rfc822;lists+kvm@lfdr.de>);
        Wed, 10 Aug 2022 05:28:46 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:54780 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S232156AbiHJJ2b (ORCPT <rfc822;kvm@vger.kernel.org>);
        Wed, 10 Aug 2022 05:28:31 -0400
Received: from dfw.source.kernel.org (dfw.source.kernel.org [IPv6:2604:1380:4641:c500::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 387B66B650
        for <kvm@vger.kernel.org>; Wed, 10 Aug 2022 02:28:29 -0700 (PDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by dfw.source.kernel.org (Postfix) with ESMTPS id C3F9761133
        for <kvm@vger.kernel.org>; Wed, 10 Aug 2022 09:28:28 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 33121C433C1;
        Wed, 10 Aug 2022 09:28:28 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=k20201202; t=1660123708;
        bh=kQBSPbPoYwglIfADdYDoTmbTNo3UjQ/xsOKBohw89TE=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=dzv1uHz9mfpDUz1QonTYyCqNI8Di2iRt6Fn6YdGVGrFOQrGtk0ImvdtQ3miASBjab
         yb4mv/zJtFllUI1CZSDjkJHJ+d7ASJpOj2ZZ1CNbpo/M9MLk/SiCPA6UpATPA25OFm
         NpfI5xcJcOdLn9hZcXL/nHhUyHmeZ8PP3PnXuvpGJi7wC6HCsF4Rx9iUofM9bQlawF
         DHTrM1gj400y87dPaEgm3u4YhovA88S23da5xwb1qKEvGlImJ1ySCrV9bwsR3l4bGM
         VdYT0SPG5duVJlvngW78YrU1IpZqNOIg6oC6dZ3zau8v6CySXgbCOmISKNf+nO+Mmz
         FmnDqdrGFYejQ==
Received: from sofa.misterjones.org ([185.219.108.64] helo=why.misterjones.org)
        by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        (Exim 4.95)
        (envelope-from <maz@kernel.org>)
        id 1oLi0o-00263f-2l;
        Wed, 10 Aug 2022 10:28:26 +0100
Date:   Wed, 10 Aug 2022 10:28:25 +0100
Message-ID: <87sfm4v45i.wl-maz@kernel.org>
From:   Marc Zyngier <maz@kernel.org>
To:     Oliver Upton <oliver.upton@linux.dev>
Cc:     linux-arm-kernel@lists.infradead.org, kvmarm@lists.cs.columbia.edu,
        kvm@vger.kernel.org, James Morse <james.morse@arm.com>,
        Suzuki K Poulose <suzuki.poulose@arm.com>,
        Alexandru Elisei <alexandru.elisei@arm.com>,
        Ricardo Koller <ricarkol@google.com>, kernel-team@android.com
Subject: Re: [PATCH 8/9] KVM: arm64: PMU: Implement PMUv3p5 long counter support
In-Reply-To: <YvNbPm7WAhUCRkx/@google.com>
References: <20220805135813.2102034-1-maz@kernel.org>
        <20220805135813.2102034-9-maz@kernel.org>
        <YvNbPm7WAhUCRkx/@google.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/27.1
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: oliver.upton@linux.dev, linux-arm-kernel@lists.infradead.org, kvmarm@lists.cs.columbia.edu, kvm@vger.kernel.org, james.morse@arm.com, suzuki.poulose@arm.com, alexandru.elisei@arm.com, ricarkol@google.com, kernel-team@android.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false
X-Spam-Status: No, score=-7.7 required=5.0 tests=BAYES_00,DKIMWL_WL_HIGH,
        DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_HI,
        SPF_HELO_NONE,SPF_PASS,T_SCC_BODY_TEXT_LINE autolearn=ham
        autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <kvm.vger.kernel.org>
X-Mailing-List: kvm@vger.kernel.org

On Wed, 10 Aug 2022 08:16:14 +0100,
Oliver Upton <oliver.upton@linux.dev> wrote:
> 
> Hi Marc,
> 
> On Fri, Aug 05, 2022 at 02:58:12PM +0100, Marc Zyngier wrote:
> > PMUv3p5 (which is mandatory with ARMv8.5) comes with some extra
> > features:
> > 
> > - All counters are 64bit
> > 
> > - The overflow point is controlled by the PMCR_EL0.LP bit
> > 
> > Add the required checks in the helpers that control counter
> > width and overflow, as well as the sysreg handling for the LP
> > bit. A new kvm_pmu_is_3p5() helper makes it easy to spot the
> > PMUv3p5 specific handling.
> > 
> > Signed-off-by: Marc Zyngier <maz@kernel.org>
> > ---
> >  arch/arm64/kvm/pmu-emul.c | 8 +++++---
> >  arch/arm64/kvm/sys_regs.c | 4 ++++
> >  include/kvm/arm_pmu.h     | 8 ++++++++
> >  3 files changed, 17 insertions(+), 3 deletions(-)
> > 
> > diff --git a/arch/arm64/kvm/pmu-emul.c b/arch/arm64/kvm/pmu-emul.c
> > index 33a88ca7b7fd..b33a2953cbf6 100644
> > --- a/arch/arm64/kvm/pmu-emul.c
> > +++ b/arch/arm64/kvm/pmu-emul.c
> > @@ -50,13 +50,15 @@ static u32 kvm_pmu_event_mask(struct kvm *kvm)
> >   */
> >  static bool kvm_pmu_idx_is_64bit(struct kvm_vcpu *vcpu, u64 select_idx)
> >  {
> > -	return (select_idx == ARMV8_PMU_CYCLE_IDX);
> > +	return (select_idx == ARMV8_PMU_CYCLE_IDX || kvm_pmu_is_3p5(vcpu));
> >  }
> >  
> >  static bool kvm_pmu_idx_has_64bit_overflow(struct kvm_vcpu *vcpu, u64 select_idx)
> >  {
> > -	return (select_idx == ARMV8_PMU_CYCLE_IDX &&
> > -		__vcpu_sys_reg(vcpu, PMCR_EL0) & ARMV8_PMU_PMCR_LC);
> > +	u64 val = __vcpu_sys_reg(vcpu, PMCR_EL0);
> > +
> > +	return (select_idx < ARMV8_PMU_CYCLE_IDX && (val & ARMV8_PMU_PMCR_LP)) ||
> > +	       (select_idx == ARMV8_PMU_CYCLE_IDX && (val & ARMV8_PMU_PMCR_LC));
> >  }
> >  
> >  static bool kvm_pmu_counter_can_chain(struct kvm_vcpu *vcpu, u64 idx)
> > diff --git a/arch/arm64/kvm/sys_regs.c b/arch/arm64/kvm/sys_regs.c
> > index c0595f31dab8..2b5e0ec5c100 100644
> > --- a/arch/arm64/kvm/sys_regs.c
> > +++ b/arch/arm64/kvm/sys_regs.c
> > @@ -654,6 +654,8 @@ static void reset_pmcr(struct kvm_vcpu *vcpu, const struct sys_reg_desc *r)
> >  	       | (ARMV8_PMU_PMCR_MASK & 0xdecafbad)) & (~ARMV8_PMU_PMCR_E);
> >  	if (!system_supports_32bit_el0())
> >  		val |= ARMV8_PMU_PMCR_LC;
> > +	if (!kvm_pmu_is_3p5(vcpu))
> > +		val &= ~ARMV8_PMU_PMCR_LP;
> >  	__vcpu_sys_reg(vcpu, r->reg) = val;
> >  }
> >  
> > @@ -703,6 +705,8 @@ static bool access_pmcr(struct kvm_vcpu *vcpu, struct sys_reg_params *p,
> >  		val |= p->regval & ARMV8_PMU_PMCR_MASK;
> >  		if (!system_supports_32bit_el0())
> >  			val |= ARMV8_PMU_PMCR_LC;
> > +		if (!kvm_pmu_is_3p5(vcpu))
> > +			val &= ~ARMV8_PMU_PMCR_LP;
> >  		__vcpu_sys_reg(vcpu, PMCR_EL0) = val;
> >  		kvm_pmu_handle_pmcr(vcpu, val);
> >  		kvm_vcpu_pmu_restore_guest(vcpu);
> > diff --git a/include/kvm/arm_pmu.h b/include/kvm/arm_pmu.h
> > index 6bda9b071084..846502251923 100644
> > --- a/include/kvm/arm_pmu.h
> > +++ b/include/kvm/arm_pmu.h
> > @@ -89,6 +89,13 @@ void kvm_vcpu_pmu_restore_host(struct kvm_vcpu *vcpu);
> >  			vcpu->arch.pmu.events = *kvm_get_pmu_events();	\
> >  	} while (0)
> >  
> > +/*
> > + * Evaluates as true when emulating PMUv3p5, and false otherwise.
> > + */
> > +#define kvm_pmu_is_3p5(vcpu)						\
> > +	(vcpu->kvm->arch.dfr0_pmuver >= ID_AA64DFR0_PMUVER_8_5 &&	\
> > +	 vcpu->kvm->arch.dfr0_pmuver != ID_AA64DFR0_PMUVER_IMP_DEF)
> 
> I don't believe the IMP_DEF condition will ever evaluate to false as
> dfr0_pmuver is sanitized at initialization and writes from userspace.

Good point. That's a leftover from a previous version. I'll fix that.

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.
